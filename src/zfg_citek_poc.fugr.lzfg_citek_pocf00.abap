*---------------------------------------------------------------------*
*    view related FORM routines
*---------------------------------------------------------------------*
*...processing: ZVI_BM_RPC_D....................................*
FORM GET_DATA_ZVI_BM_RPC_D.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_RPC_D WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_BM_RPC_D .
ZVI_BM_RPC_D-MANDT =
ZTB_BM_RPC_D-MANDT .
ZVI_BM_RPC_D-REPID =
ZTB_BM_RPC_D-REPID .
ZVI_BM_RPC_D-BUKRS =
ZTB_BM_RPC_D-BUKRS .
ZVI_BM_RPC_D-EFMON =
ZTB_BM_RPC_D-EFMON .
ZVI_BM_RPC_D-RPSEG =
ZTB_BM_RPC_D-RPSEG .
ZVI_BM_RPC_D-RITEM =
ZTB_BM_RPC_D-RITEM .
ZVI_BM_RPC_D-LANGU =
ZTB_BM_RPC_D-LANGU .
ZVI_BM_RPC_D-ROWPOS =
ZTB_BM_RPC_D-ROWPOS .
ZVI_BM_RPC_D-STYLE1 =
ZTB_BM_RPC_D-STYLE1 .
ZVI_BM_RPC_D-STYLE2 =
ZTB_BM_RPC_D-STYLE2 .
ZVI_BM_RPC_D-STYLE3 =
ZTB_BM_RPC_D-STYLE3 .
ZVI_BM_RPC_D-COL01 =
ZTB_BM_RPC_D-COL01 .
ZVI_BM_RPC_D-COL02 =
ZTB_BM_RPC_D-COL02 .
ZVI_BM_RPC_D-COL03 =
ZTB_BM_RPC_D-COL03 .
ZVI_BM_RPC_D-COL04 =
ZTB_BM_RPC_D-COL04 .
ZVI_BM_RPC_D-COL05 =
ZTB_BM_RPC_D-COL05 .
ZVI_BM_RPC_D-COL06 =
ZTB_BM_RPC_D-COL06 .
ZVI_BM_RPC_D-COL07 =
ZTB_BM_RPC_D-COL07 .
ZVI_BM_RPC_D-COL08 =
ZTB_BM_RPC_D-COL08 .
ZVI_BM_RPC_D-COL09 =
ZTB_BM_RPC_D-COL09 .
ZVI_BM_RPC_D-COL10 =
ZTB_BM_RPC_D-COL10 .
ZVI_BM_RPC_D-COL11 =
ZTB_BM_RPC_D-COL11 .
ZVI_BM_RPC_D-COL12 =
ZTB_BM_RPC_D-COL12 .
ZVI_BM_RPC_D-COL13 =
ZTB_BM_RPC_D-COL13 .
ZVI_BM_RPC_D-COL14 =
ZTB_BM_RPC_D-COL14 .
ZVI_BM_RPC_D-COL15 =
ZTB_BM_RPC_D-COL15 .
ZVI_BM_RPC_D-COL16 =
ZTB_BM_RPC_D-COL16 .
ZVI_BM_RPC_D-COL17 =
ZTB_BM_RPC_D-COL17 .
ZVI_BM_RPC_D-COL18 =
ZTB_BM_RPC_D-COL18 .
ZVI_BM_RPC_D-COL19 =
ZTB_BM_RPC_D-COL19 .
ZVI_BM_RPC_D-COL20 =
ZTB_BM_RPC_D-COL20 .
ZVI_BM_RPC_D-TEX01 =
ZTB_BM_RPC_D-TEX01 .
ZVI_BM_RPC_D-TEX02 =
ZTB_BM_RPC_D-TEX02 .
ZVI_BM_RPC_D-TEX03 =
ZTB_BM_RPC_D-TEX03 .
ZVI_BM_RPC_D-TEX04 =
ZTB_BM_RPC_D-TEX04 .
ZVI_BM_RPC_D-TEX05 =
ZTB_BM_RPC_D-TEX05 .
    SELECT SINGLE * FROM ZTB_BM_RPC_F WHERE
REPID = ZTB_BM_RPC_D-REPID AND
BUKRS = ZTB_BM_RPC_D-BUKRS AND
EFMON = ZTB_BM_RPC_D-EFMON AND
RPSEG = ZTB_BM_RPC_D-RPSEG AND
RITEM = ZTB_BM_RPC_D-RITEM .
    IF SY-SUBRC EQ 0.
      SELECT SINGLE * FROM ZTB_BM_RPC_SI WHERE
REPID = ZTB_BM_RPC_F-REPID AND
RPSEG = ZTB_BM_RPC_F-RPSEG AND
RITEM = ZTB_BM_RPC_F-RITEM .
      IF SY-SUBRC EQ 0.
ZVI_BM_RPC_D-RITNM =
ZTB_BM_RPC_SI-RITNM .
      ENDIF.
    ENDIF.
<VIM_TOTAL_STRUC> = ZVI_BM_RPC_D.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_BM_RPC_D .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_BM_RPC_D.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_BM_RPC_D-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_RPC_D WHERE
  REPID = ZVI_BM_RPC_D-REPID AND
  BUKRS = ZVI_BM_RPC_D-BUKRS AND
  EFMON = ZVI_BM_RPC_D-EFMON AND
  RPSEG = ZVI_BM_RPC_D-RPSEG AND
  RITEM = ZVI_BM_RPC_D-RITEM AND
  LANGU = ZVI_BM_RPC_D-LANGU AND
  ROWPOS = ZVI_BM_RPC_D-ROWPOS .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_RPC_D .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_RPC_D WHERE
  REPID = ZVI_BM_RPC_D-REPID AND
  BUKRS = ZVI_BM_RPC_D-BUKRS AND
  EFMON = ZVI_BM_RPC_D-EFMON AND
  RPSEG = ZVI_BM_RPC_D-RPSEG AND
  RITEM = ZVI_BM_RPC_D-RITEM AND
  LANGU = ZVI_BM_RPC_D-LANGU AND
  ROWPOS = ZVI_BM_RPC_D-ROWPOS .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_RPC_D.
    ENDIF.
ZTB_BM_RPC_D-MANDT =
ZVI_BM_RPC_D-MANDT .
ZTB_BM_RPC_D-REPID =
ZVI_BM_RPC_D-REPID .
ZTB_BM_RPC_D-BUKRS =
ZVI_BM_RPC_D-BUKRS .
ZTB_BM_RPC_D-EFMON =
ZVI_BM_RPC_D-EFMON .
ZTB_BM_RPC_D-RPSEG =
ZVI_BM_RPC_D-RPSEG .
ZTB_BM_RPC_D-RITEM =
ZVI_BM_RPC_D-RITEM .
ZTB_BM_RPC_D-LANGU =
ZVI_BM_RPC_D-LANGU .
ZTB_BM_RPC_D-ROWPOS =
ZVI_BM_RPC_D-ROWPOS .
ZTB_BM_RPC_D-STYLE1 =
ZVI_BM_RPC_D-STYLE1 .
ZTB_BM_RPC_D-STYLE2 =
ZVI_BM_RPC_D-STYLE2 .
ZTB_BM_RPC_D-STYLE3 =
ZVI_BM_RPC_D-STYLE3 .
ZTB_BM_RPC_D-COL01 =
ZVI_BM_RPC_D-COL01 .
ZTB_BM_RPC_D-COL02 =
ZVI_BM_RPC_D-COL02 .
ZTB_BM_RPC_D-COL03 =
ZVI_BM_RPC_D-COL03 .
ZTB_BM_RPC_D-COL04 =
ZVI_BM_RPC_D-COL04 .
ZTB_BM_RPC_D-COL05 =
ZVI_BM_RPC_D-COL05 .
ZTB_BM_RPC_D-COL06 =
ZVI_BM_RPC_D-COL06 .
ZTB_BM_RPC_D-COL07 =
ZVI_BM_RPC_D-COL07 .
ZTB_BM_RPC_D-COL08 =
ZVI_BM_RPC_D-COL08 .
ZTB_BM_RPC_D-COL09 =
ZVI_BM_RPC_D-COL09 .
ZTB_BM_RPC_D-COL10 =
ZVI_BM_RPC_D-COL10 .
ZTB_BM_RPC_D-COL11 =
ZVI_BM_RPC_D-COL11 .
ZTB_BM_RPC_D-COL12 =
ZVI_BM_RPC_D-COL12 .
ZTB_BM_RPC_D-COL13 =
ZVI_BM_RPC_D-COL13 .
ZTB_BM_RPC_D-COL14 =
ZVI_BM_RPC_D-COL14 .
ZTB_BM_RPC_D-COL15 =
ZVI_BM_RPC_D-COL15 .
ZTB_BM_RPC_D-COL16 =
ZVI_BM_RPC_D-COL16 .
ZTB_BM_RPC_D-COL17 =
ZVI_BM_RPC_D-COL17 .
ZTB_BM_RPC_D-COL18 =
ZVI_BM_RPC_D-COL18 .
ZTB_BM_RPC_D-COL19 =
ZVI_BM_RPC_D-COL19 .
ZTB_BM_RPC_D-COL20 =
ZVI_BM_RPC_D-COL20 .
ZTB_BM_RPC_D-TEX01 =
ZVI_BM_RPC_D-TEX01 .
ZTB_BM_RPC_D-TEX02 =
ZVI_BM_RPC_D-TEX02 .
ZTB_BM_RPC_D-TEX03 =
ZVI_BM_RPC_D-TEX03 .
ZTB_BM_RPC_D-TEX04 =
ZVI_BM_RPC_D-TEX04 .
ZTB_BM_RPC_D-TEX05 =
ZVI_BM_RPC_D-TEX05 .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_RPC_D ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_RPC_D .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_BM_RPC_D-UPD_FLAG,
STATUS_ZVI_BM_RPC_D-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_BM_RPC_D.
  SELECT SINGLE * FROM ZTB_BM_RPC_D WHERE
REPID = ZVI_BM_RPC_D-REPID AND
BUKRS = ZVI_BM_RPC_D-BUKRS AND
EFMON = ZVI_BM_RPC_D-EFMON AND
RPSEG = ZVI_BM_RPC_D-RPSEG AND
RITEM = ZVI_BM_RPC_D-RITEM AND
LANGU = ZVI_BM_RPC_D-LANGU AND
ROWPOS = ZVI_BM_RPC_D-ROWPOS .
ZVI_BM_RPC_D-MANDT =
ZTB_BM_RPC_D-MANDT .
ZVI_BM_RPC_D-REPID =
ZTB_BM_RPC_D-REPID .
ZVI_BM_RPC_D-BUKRS =
ZTB_BM_RPC_D-BUKRS .
ZVI_BM_RPC_D-EFMON =
ZTB_BM_RPC_D-EFMON .
ZVI_BM_RPC_D-RPSEG =
ZTB_BM_RPC_D-RPSEG .
ZVI_BM_RPC_D-RITEM =
ZTB_BM_RPC_D-RITEM .
ZVI_BM_RPC_D-LANGU =
ZTB_BM_RPC_D-LANGU .
ZVI_BM_RPC_D-ROWPOS =
ZTB_BM_RPC_D-ROWPOS .
ZVI_BM_RPC_D-STYLE1 =
ZTB_BM_RPC_D-STYLE1 .
ZVI_BM_RPC_D-STYLE2 =
ZTB_BM_RPC_D-STYLE2 .
ZVI_BM_RPC_D-STYLE3 =
ZTB_BM_RPC_D-STYLE3 .
ZVI_BM_RPC_D-COL01 =
ZTB_BM_RPC_D-COL01 .
ZVI_BM_RPC_D-COL02 =
ZTB_BM_RPC_D-COL02 .
ZVI_BM_RPC_D-COL03 =
ZTB_BM_RPC_D-COL03 .
ZVI_BM_RPC_D-COL04 =
ZTB_BM_RPC_D-COL04 .
ZVI_BM_RPC_D-COL05 =
ZTB_BM_RPC_D-COL05 .
ZVI_BM_RPC_D-COL06 =
ZTB_BM_RPC_D-COL06 .
ZVI_BM_RPC_D-COL07 =
ZTB_BM_RPC_D-COL07 .
ZVI_BM_RPC_D-COL08 =
ZTB_BM_RPC_D-COL08 .
ZVI_BM_RPC_D-COL09 =
ZTB_BM_RPC_D-COL09 .
ZVI_BM_RPC_D-COL10 =
ZTB_BM_RPC_D-COL10 .
ZVI_BM_RPC_D-COL11 =
ZTB_BM_RPC_D-COL11 .
ZVI_BM_RPC_D-COL12 =
ZTB_BM_RPC_D-COL12 .
ZVI_BM_RPC_D-COL13 =
ZTB_BM_RPC_D-COL13 .
ZVI_BM_RPC_D-COL14 =
ZTB_BM_RPC_D-COL14 .
ZVI_BM_RPC_D-COL15 =
ZTB_BM_RPC_D-COL15 .
ZVI_BM_RPC_D-COL16 =
ZTB_BM_RPC_D-COL16 .
ZVI_BM_RPC_D-COL17 =
ZTB_BM_RPC_D-COL17 .
ZVI_BM_RPC_D-COL18 =
ZTB_BM_RPC_D-COL18 .
ZVI_BM_RPC_D-COL19 =
ZTB_BM_RPC_D-COL19 .
ZVI_BM_RPC_D-COL20 =
ZTB_BM_RPC_D-COL20 .
ZVI_BM_RPC_D-TEX01 =
ZTB_BM_RPC_D-TEX01 .
ZVI_BM_RPC_D-TEX02 =
ZTB_BM_RPC_D-TEX02 .
ZVI_BM_RPC_D-TEX03 =
ZTB_BM_RPC_D-TEX03 .
ZVI_BM_RPC_D-TEX04 =
ZTB_BM_RPC_D-TEX04 .
ZVI_BM_RPC_D-TEX05 =
ZTB_BM_RPC_D-TEX05 .
    SELECT SINGLE * FROM ZTB_BM_RPC_F WHERE
REPID = ZTB_BM_RPC_D-REPID AND
BUKRS = ZTB_BM_RPC_D-BUKRS AND
EFMON = ZTB_BM_RPC_D-EFMON AND
RPSEG = ZTB_BM_RPC_D-RPSEG AND
RITEM = ZTB_BM_RPC_D-RITEM .
    IF SY-SUBRC EQ 0.
      SELECT SINGLE * FROM ZTB_BM_RPC_SI WHERE
REPID = ZTB_BM_RPC_F-REPID AND
RPSEG = ZTB_BM_RPC_F-RPSEG AND
RITEM = ZTB_BM_RPC_F-RITEM .
      IF SY-SUBRC EQ 0.
ZVI_BM_RPC_D-RITNM =
ZTB_BM_RPC_SI-RITNM .
      ELSE.
        CLEAR SY-SUBRC.
        CLEAR ZVI_BM_RPC_D-RITNM .
      ENDIF.
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZVI_BM_RPC_D-RITNM .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_BM_RPC_D USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_BM_RPC_D-REPID TO
ZTB_BM_RPC_D-REPID .
MOVE ZVI_BM_RPC_D-BUKRS TO
ZTB_BM_RPC_D-BUKRS .
MOVE ZVI_BM_RPC_D-EFMON TO
ZTB_BM_RPC_D-EFMON .
MOVE ZVI_BM_RPC_D-RPSEG TO
ZTB_BM_RPC_D-RPSEG .
MOVE ZVI_BM_RPC_D-RITEM TO
ZTB_BM_RPC_D-RITEM .
MOVE ZVI_BM_RPC_D-LANGU TO
ZTB_BM_RPC_D-LANGU .
MOVE ZVI_BM_RPC_D-ROWPOS TO
ZTB_BM_RPC_D-ROWPOS .
MOVE ZVI_BM_RPC_D-MANDT TO
ZTB_BM_RPC_D-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_RPC_D'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_RPC_D TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_RPC_D'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
FORM COMPL_ZVI_BM_RPC_D USING WORKAREA.
*      provides (read-only) fields from secondary tables related
*      to primary tables by foreignkey relationships
ZTB_BM_RPC_D-MANDT =
ZVI_BM_RPC_D-MANDT .
ZTB_BM_RPC_D-REPID =
ZVI_BM_RPC_D-REPID .
ZTB_BM_RPC_D-BUKRS =
ZVI_BM_RPC_D-BUKRS .
ZTB_BM_RPC_D-EFMON =
ZVI_BM_RPC_D-EFMON .
ZTB_BM_RPC_D-RPSEG =
ZVI_BM_RPC_D-RPSEG .
ZTB_BM_RPC_D-RITEM =
ZVI_BM_RPC_D-RITEM .
ZTB_BM_RPC_D-LANGU =
ZVI_BM_RPC_D-LANGU .
ZTB_BM_RPC_D-ROWPOS =
ZVI_BM_RPC_D-ROWPOS .
ZTB_BM_RPC_D-STYLE1 =
ZVI_BM_RPC_D-STYLE1 .
ZTB_BM_RPC_D-STYLE2 =
ZVI_BM_RPC_D-STYLE2 .
ZTB_BM_RPC_D-STYLE3 =
ZVI_BM_RPC_D-STYLE3 .
ZTB_BM_RPC_D-COL01 =
ZVI_BM_RPC_D-COL01 .
ZTB_BM_RPC_D-COL02 =
ZVI_BM_RPC_D-COL02 .
ZTB_BM_RPC_D-COL03 =
ZVI_BM_RPC_D-COL03 .
ZTB_BM_RPC_D-COL04 =
ZVI_BM_RPC_D-COL04 .
ZTB_BM_RPC_D-COL05 =
ZVI_BM_RPC_D-COL05 .
ZTB_BM_RPC_D-COL06 =
ZVI_BM_RPC_D-COL06 .
ZTB_BM_RPC_D-COL07 =
ZVI_BM_RPC_D-COL07 .
ZTB_BM_RPC_D-COL08 =
ZVI_BM_RPC_D-COL08 .
ZTB_BM_RPC_D-COL09 =
ZVI_BM_RPC_D-COL09 .
ZTB_BM_RPC_D-COL10 =
ZVI_BM_RPC_D-COL10 .
ZTB_BM_RPC_D-COL11 =
ZVI_BM_RPC_D-COL11 .
ZTB_BM_RPC_D-COL12 =
ZVI_BM_RPC_D-COL12 .
ZTB_BM_RPC_D-COL13 =
ZVI_BM_RPC_D-COL13 .
ZTB_BM_RPC_D-COL14 =
ZVI_BM_RPC_D-COL14 .
ZTB_BM_RPC_D-COL15 =
ZVI_BM_RPC_D-COL15 .
ZTB_BM_RPC_D-COL16 =
ZVI_BM_RPC_D-COL16 .
ZTB_BM_RPC_D-COL17 =
ZVI_BM_RPC_D-COL17 .
ZTB_BM_RPC_D-COL18 =
ZVI_BM_RPC_D-COL18 .
ZTB_BM_RPC_D-COL19 =
ZVI_BM_RPC_D-COL19 .
ZTB_BM_RPC_D-COL20 =
ZVI_BM_RPC_D-COL20 .
ZTB_BM_RPC_D-TEX01 =
ZVI_BM_RPC_D-TEX01 .
ZTB_BM_RPC_D-TEX02 =
ZVI_BM_RPC_D-TEX02 .
ZTB_BM_RPC_D-TEX03 =
ZVI_BM_RPC_D-TEX03 .
ZTB_BM_RPC_D-TEX04 =
ZVI_BM_RPC_D-TEX04 .
ZTB_BM_RPC_D-TEX05 =
ZVI_BM_RPC_D-TEX05 .
    SELECT SINGLE * FROM ZTB_BM_RPC_F WHERE
REPID = ZTB_BM_RPC_D-REPID AND
BUKRS = ZTB_BM_RPC_D-BUKRS AND
EFMON = ZTB_BM_RPC_D-EFMON AND
RPSEG = ZTB_BM_RPC_D-RPSEG AND
RITEM = ZTB_BM_RPC_D-RITEM .
    IF SY-SUBRC EQ 0.
      SELECT SINGLE * FROM ZTB_BM_RPC_SI WHERE
REPID = ZTB_BM_RPC_F-REPID AND
RPSEG = ZTB_BM_RPC_F-RPSEG AND
RITEM = ZTB_BM_RPC_F-RITEM .
      IF SY-SUBRC EQ 0.
ZVI_BM_RPC_D-RITNM =
ZTB_BM_RPC_SI-RITNM .
      ELSE.
        CLEAR SY-SUBRC.
        CLEAR ZVI_BM_RPC_D-RITNM .
      ENDIF.
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZVI_BM_RPC_D-RITNM .
    ENDIF.
ENDFORM.
*...processing: ZVI_BM_RPC_F....................................*
FORM GET_DATA_ZVI_BM_RPC_F.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_RPC_F WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_BM_RPC_F .
ZVI_BM_RPC_F-MANDT =
ZTB_BM_RPC_F-MANDT .
ZVI_BM_RPC_F-REPID =
ZTB_BM_RPC_F-REPID .
ZVI_BM_RPC_F-BUKRS =
ZTB_BM_RPC_F-BUKRS .
ZVI_BM_RPC_F-EFMON =
ZTB_BM_RPC_F-EFMON .
ZVI_BM_RPC_F-RPSEG =
ZTB_BM_RPC_F-RPSEG .
ZVI_BM_RPC_F-RITEM =
ZTB_BM_RPC_F-RITEM .
ZVI_BM_RPC_F-CRUSR =
ZTB_BM_RPC_F-CRUSR .
ZVI_BM_RPC_F-CRDAT =
ZTB_BM_RPC_F-CRDAT .
ZVI_BM_RPC_F-CRTIM =
ZTB_BM_RPC_F-CRTIM .
ZVI_BM_RPC_F-CHUSR =
ZTB_BM_RPC_F-CHUSR .
ZVI_BM_RPC_F-CHDAT =
ZTB_BM_RPC_F-CHDAT .
ZVI_BM_RPC_F-CHTIM =
ZTB_BM_RPC_F-CHTIM .
    SELECT SINGLE * FROM ZTB_BM_RPC_SI WHERE
REPID = ZTB_BM_RPC_F-REPID AND
RPSEG = ZTB_BM_RPC_F-RPSEG AND
RITEM = ZTB_BM_RPC_F-RITEM .
    IF SY-SUBRC EQ 0.
ZVI_BM_RPC_F-RITNM =
ZTB_BM_RPC_SI-RITNM .
ZVI_BM_RPC_F-ITMTY =
ZTB_BM_RPC_SI-ITMTY .
ZVI_BM_RPC_F-VERSN =
ZTB_BM_RPC_SI-VERSN .
ZVI_BM_RPC_F-CPROG =
ZTB_BM_RPC_SI-CPROG .
ZVI_BM_RPC_F-LAYOUT =
ZTB_BM_RPC_SI-LAYOUT .
ZVI_BM_RPC_F-TEMPL =
ZTB_BM_RPC_SI-TEMPL .
      SELECT SINGLE * FROM ZTB_BM_RPC_S WHERE
REPID = ZTB_BM_RPC_SI-REPID AND
RPSEG = ZTB_BM_RPC_SI-RPSEG .
      IF SY-SUBRC EQ 0.
ZVI_BM_RPC_F-RPSNM =
ZTB_BM_RPC_S-RPSNM .
        SELECT SINGLE * FROM ZTB_BM_RPC_R WHERE
REPID = ZTB_BM_RPC_S-REPID .
        IF SY-SUBRC EQ 0.
ZVI_BM_RPC_F-REPNM =
ZTB_BM_RPC_R-REPNM .
        ENDIF.
      ENDIF.
    ENDIF.
<VIM_TOTAL_STRUC> = ZVI_BM_RPC_F.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_BM_RPC_F .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_BM_RPC_F.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_BM_RPC_F-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_RPC_F WHERE
  REPID = ZVI_BM_RPC_F-REPID AND
  BUKRS = ZVI_BM_RPC_F-BUKRS AND
  EFMON = ZVI_BM_RPC_F-EFMON AND
  RPSEG = ZVI_BM_RPC_F-RPSEG AND
  RITEM = ZVI_BM_RPC_F-RITEM .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_RPC_F .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_RPC_F WHERE
  REPID = ZVI_BM_RPC_F-REPID AND
  BUKRS = ZVI_BM_RPC_F-BUKRS AND
  EFMON = ZVI_BM_RPC_F-EFMON AND
  RPSEG = ZVI_BM_RPC_F-RPSEG AND
  RITEM = ZVI_BM_RPC_F-RITEM .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_RPC_F.
    ENDIF.
ZTB_BM_RPC_F-MANDT =
ZVI_BM_RPC_F-MANDT .
ZTB_BM_RPC_F-REPID =
ZVI_BM_RPC_F-REPID .
ZTB_BM_RPC_F-BUKRS =
ZVI_BM_RPC_F-BUKRS .
ZTB_BM_RPC_F-EFMON =
ZVI_BM_RPC_F-EFMON .
ZTB_BM_RPC_F-RPSEG =
ZVI_BM_RPC_F-RPSEG .
ZTB_BM_RPC_F-RITEM =
ZVI_BM_RPC_F-RITEM .
ZTB_BM_RPC_F-CRUSR =
ZVI_BM_RPC_F-CRUSR .
ZTB_BM_RPC_F-CRDAT =
ZVI_BM_RPC_F-CRDAT .
ZTB_BM_RPC_F-CRTIM =
ZVI_BM_RPC_F-CRTIM .
ZTB_BM_RPC_F-CHUSR =
ZVI_BM_RPC_F-CHUSR .
ZTB_BM_RPC_F-CHDAT =
ZVI_BM_RPC_F-CHDAT .
ZTB_BM_RPC_F-CHTIM =
ZVI_BM_RPC_F-CHTIM .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_RPC_F ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_RPC_F .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_BM_RPC_F-UPD_FLAG,
STATUS_ZVI_BM_RPC_F-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_BM_RPC_F.
  SELECT SINGLE * FROM ZTB_BM_RPC_F WHERE
REPID = ZVI_BM_RPC_F-REPID AND
BUKRS = ZVI_BM_RPC_F-BUKRS AND
EFMON = ZVI_BM_RPC_F-EFMON AND
RPSEG = ZVI_BM_RPC_F-RPSEG AND
RITEM = ZVI_BM_RPC_F-RITEM .
ZVI_BM_RPC_F-MANDT =
ZTB_BM_RPC_F-MANDT .
ZVI_BM_RPC_F-REPID =
ZTB_BM_RPC_F-REPID .
ZVI_BM_RPC_F-BUKRS =
ZTB_BM_RPC_F-BUKRS .
ZVI_BM_RPC_F-EFMON =
ZTB_BM_RPC_F-EFMON .
ZVI_BM_RPC_F-RPSEG =
ZTB_BM_RPC_F-RPSEG .
ZVI_BM_RPC_F-RITEM =
ZTB_BM_RPC_F-RITEM .
ZVI_BM_RPC_F-CRUSR =
ZTB_BM_RPC_F-CRUSR .
ZVI_BM_RPC_F-CRDAT =
ZTB_BM_RPC_F-CRDAT .
ZVI_BM_RPC_F-CRTIM =
ZTB_BM_RPC_F-CRTIM .
ZVI_BM_RPC_F-CHUSR =
ZTB_BM_RPC_F-CHUSR .
ZVI_BM_RPC_F-CHDAT =
ZTB_BM_RPC_F-CHDAT .
ZVI_BM_RPC_F-CHTIM =
ZTB_BM_RPC_F-CHTIM .
    SELECT SINGLE * FROM ZTB_BM_RPC_SI WHERE
REPID = ZTB_BM_RPC_F-REPID AND
RPSEG = ZTB_BM_RPC_F-RPSEG AND
RITEM = ZTB_BM_RPC_F-RITEM .
    IF SY-SUBRC EQ 0.
ZVI_BM_RPC_F-RITNM =
ZTB_BM_RPC_SI-RITNM .
ZVI_BM_RPC_F-ITMTY =
ZTB_BM_RPC_SI-ITMTY .
ZVI_BM_RPC_F-VERSN =
ZTB_BM_RPC_SI-VERSN .
ZVI_BM_RPC_F-CPROG =
ZTB_BM_RPC_SI-CPROG .
ZVI_BM_RPC_F-LAYOUT =
ZTB_BM_RPC_SI-LAYOUT .
ZVI_BM_RPC_F-TEMPL =
ZTB_BM_RPC_SI-TEMPL .
      SELECT SINGLE * FROM ZTB_BM_RPC_S WHERE
REPID = ZTB_BM_RPC_SI-REPID AND
RPSEG = ZTB_BM_RPC_SI-RPSEG .
      IF SY-SUBRC EQ 0.
ZVI_BM_RPC_F-RPSNM =
ZTB_BM_RPC_S-RPSNM .
        SELECT SINGLE * FROM ZTB_BM_RPC_R WHERE
REPID = ZTB_BM_RPC_S-REPID .
        IF SY-SUBRC EQ 0.
ZVI_BM_RPC_F-REPNM =
ZTB_BM_RPC_R-REPNM .
        ELSE.
          CLEAR SY-SUBRC.
          CLEAR ZVI_BM_RPC_F-REPNM .
        ENDIF.
      ELSE.
        CLEAR SY-SUBRC.
        CLEAR ZVI_BM_RPC_F-RPSNM .
        CLEAR ZVI_BM_RPC_F-REPNM .
      ENDIF.
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZVI_BM_RPC_F-RITNM .
      CLEAR ZVI_BM_RPC_F-ITMTY .
      CLEAR ZVI_BM_RPC_F-VERSN .
      CLEAR ZVI_BM_RPC_F-CPROG .
      CLEAR ZVI_BM_RPC_F-LAYOUT .
      CLEAR ZVI_BM_RPC_F-TEMPL .
      CLEAR ZVI_BM_RPC_F-REPNM .
      CLEAR ZVI_BM_RPC_F-RPSNM .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_BM_RPC_F USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_BM_RPC_F-REPID TO
ZTB_BM_RPC_F-REPID .
MOVE ZVI_BM_RPC_F-BUKRS TO
ZTB_BM_RPC_F-BUKRS .
MOVE ZVI_BM_RPC_F-EFMON TO
ZTB_BM_RPC_F-EFMON .
MOVE ZVI_BM_RPC_F-RPSEG TO
ZTB_BM_RPC_F-RPSEG .
MOVE ZVI_BM_RPC_F-RITEM TO
ZTB_BM_RPC_F-RITEM .
MOVE ZVI_BM_RPC_F-MANDT TO
ZTB_BM_RPC_F-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_RPC_F'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_RPC_F TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_RPC_F'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
FORM COMPL_ZVI_BM_RPC_F USING WORKAREA.
*      provides (read-only) fields from secondary tables related
*      to primary tables by foreignkey relationships
ZTB_BM_RPC_F-MANDT =
ZVI_BM_RPC_F-MANDT .
ZTB_BM_RPC_F-REPID =
ZVI_BM_RPC_F-REPID .
ZTB_BM_RPC_F-BUKRS =
ZVI_BM_RPC_F-BUKRS .
ZTB_BM_RPC_F-EFMON =
ZVI_BM_RPC_F-EFMON .
ZTB_BM_RPC_F-RPSEG =
ZVI_BM_RPC_F-RPSEG .
ZTB_BM_RPC_F-RITEM =
ZVI_BM_RPC_F-RITEM .
ZTB_BM_RPC_F-CRUSR =
ZVI_BM_RPC_F-CRUSR .
ZTB_BM_RPC_F-CRDAT =
ZVI_BM_RPC_F-CRDAT .
ZTB_BM_RPC_F-CRTIM =
ZVI_BM_RPC_F-CRTIM .
ZTB_BM_RPC_F-CHUSR =
ZVI_BM_RPC_F-CHUSR .
ZTB_BM_RPC_F-CHDAT =
ZVI_BM_RPC_F-CHDAT .
ZTB_BM_RPC_F-CHTIM =
ZVI_BM_RPC_F-CHTIM .
    SELECT SINGLE * FROM ZTB_BM_RPC_SI WHERE
REPID = ZTB_BM_RPC_F-REPID AND
RPSEG = ZTB_BM_RPC_F-RPSEG AND
RITEM = ZTB_BM_RPC_F-RITEM .
    IF SY-SUBRC EQ 0.
ZVI_BM_RPC_F-RITNM =
ZTB_BM_RPC_SI-RITNM .
ZVI_BM_RPC_F-ITMTY =
ZTB_BM_RPC_SI-ITMTY .
ZVI_BM_RPC_F-VERSN =
ZTB_BM_RPC_SI-VERSN .
ZVI_BM_RPC_F-CPROG =
ZTB_BM_RPC_SI-CPROG .
ZVI_BM_RPC_F-LAYOUT =
ZTB_BM_RPC_SI-LAYOUT .
ZVI_BM_RPC_F-TEMPL =
ZTB_BM_RPC_SI-TEMPL .
      SELECT SINGLE * FROM ZTB_BM_RPC_S WHERE
REPID = ZTB_BM_RPC_SI-REPID AND
RPSEG = ZTB_BM_RPC_SI-RPSEG .
      IF SY-SUBRC EQ 0.
ZVI_BM_RPC_F-RPSNM =
ZTB_BM_RPC_S-RPSNM .
        SELECT SINGLE * FROM ZTB_BM_RPC_R WHERE
REPID = ZTB_BM_RPC_S-REPID .
        IF SY-SUBRC EQ 0.
ZVI_BM_RPC_F-REPNM =
ZTB_BM_RPC_R-REPNM .
        ELSE.
          CLEAR SY-SUBRC.
          CLEAR ZVI_BM_RPC_F-REPNM .
        ENDIF.
      ELSE.
        CLEAR SY-SUBRC.
        CLEAR ZVI_BM_RPC_F-RPSNM .
        CLEAR ZVI_BM_RPC_F-REPNM .
      ENDIF.
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZVI_BM_RPC_F-RITNM .
      CLEAR ZVI_BM_RPC_F-ITMTY .
      CLEAR ZVI_BM_RPC_F-VERSN .
      CLEAR ZVI_BM_RPC_F-CPROG .
      CLEAR ZVI_BM_RPC_F-LAYOUT .
      CLEAR ZVI_BM_RPC_F-TEMPL .
      CLEAR ZVI_BM_RPC_F-REPNM .
      CLEAR ZVI_BM_RPC_F-RPSNM .
    ENDIF.
ENDFORM.
*...processing: ZVI_BM_RPC_L....................................*
FORM GET_DATA_ZVI_BM_RPC_L.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_RPC_L WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_BM_RPC_L .
ZVI_BM_RPC_L-MANDT =
ZTB_BM_RPC_L-MANDT .
ZVI_BM_RPC_L-REPID =
ZTB_BM_RPC_L-REPID .
ZVI_BM_RPC_L-EFMON =
ZTB_BM_RPC_L-EFMON .
ZVI_BM_RPC_L-RPSEG =
ZTB_BM_RPC_L-RPSEG .
ZVI_BM_RPC_L-RITEM =
ZTB_BM_RPC_L-RITEM .
ZVI_BM_RPC_L-FNAME =
ZTB_BM_RPC_L-FNAME .
ZVI_BM_RPC_L-DTYPE =
ZTB_BM_RPC_L-DTYPE .
ZVI_BM_RPC_L-DESEN =
ZTB_BM_RPC_L-DESEN .
ZVI_BM_RPC_L-DESVI =
ZTB_BM_RPC_L-DESVI .
ZVI_BM_RPC_L-CHUSR =
ZTB_BM_RPC_L-CHUSR .
ZVI_BM_RPC_L-CHDAT =
ZTB_BM_RPC_L-CHDAT .
ZVI_BM_RPC_L-CHTIM =
ZTB_BM_RPC_L-CHTIM .
<VIM_TOTAL_STRUC> = ZVI_BM_RPC_L.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_BM_RPC_L .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_BM_RPC_L.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_BM_RPC_L-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_RPC_L WHERE
  REPID = ZVI_BM_RPC_L-REPID AND
  EFMON = ZVI_BM_RPC_L-EFMON AND
  RPSEG = ZVI_BM_RPC_L-RPSEG AND
  RITEM = ZVI_BM_RPC_L-RITEM AND
  FNAME = ZVI_BM_RPC_L-FNAME .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_RPC_L .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_RPC_L WHERE
  REPID = ZVI_BM_RPC_L-REPID AND
  EFMON = ZVI_BM_RPC_L-EFMON AND
  RPSEG = ZVI_BM_RPC_L-RPSEG AND
  RITEM = ZVI_BM_RPC_L-RITEM AND
  FNAME = ZVI_BM_RPC_L-FNAME .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_RPC_L.
    ENDIF.
ZTB_BM_RPC_L-MANDT =
ZVI_BM_RPC_L-MANDT .
ZTB_BM_RPC_L-REPID =
ZVI_BM_RPC_L-REPID .
ZTB_BM_RPC_L-EFMON =
ZVI_BM_RPC_L-EFMON .
ZTB_BM_RPC_L-RPSEG =
ZVI_BM_RPC_L-RPSEG .
ZTB_BM_RPC_L-RITEM =
ZVI_BM_RPC_L-RITEM .
ZTB_BM_RPC_L-FNAME =
ZVI_BM_RPC_L-FNAME .
ZTB_BM_RPC_L-DTYPE =
ZVI_BM_RPC_L-DTYPE .
ZTB_BM_RPC_L-DESEN =
ZVI_BM_RPC_L-DESEN .
ZTB_BM_RPC_L-DESVI =
ZVI_BM_RPC_L-DESVI .
ZTB_BM_RPC_L-CHUSR =
ZVI_BM_RPC_L-CHUSR .
ZTB_BM_RPC_L-CHDAT =
ZVI_BM_RPC_L-CHDAT .
ZTB_BM_RPC_L-CHTIM =
ZVI_BM_RPC_L-CHTIM .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_RPC_L ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_RPC_L .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_BM_RPC_L-UPD_FLAG,
STATUS_ZVI_BM_RPC_L-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_BM_RPC_L.
  SELECT SINGLE * FROM ZTB_BM_RPC_L WHERE
REPID = ZVI_BM_RPC_L-REPID AND
EFMON = ZVI_BM_RPC_L-EFMON AND
RPSEG = ZVI_BM_RPC_L-RPSEG AND
RITEM = ZVI_BM_RPC_L-RITEM AND
FNAME = ZVI_BM_RPC_L-FNAME .
ZVI_BM_RPC_L-MANDT =
ZTB_BM_RPC_L-MANDT .
ZVI_BM_RPC_L-REPID =
ZTB_BM_RPC_L-REPID .
ZVI_BM_RPC_L-EFMON =
ZTB_BM_RPC_L-EFMON .
ZVI_BM_RPC_L-RPSEG =
ZTB_BM_RPC_L-RPSEG .
ZVI_BM_RPC_L-RITEM =
ZTB_BM_RPC_L-RITEM .
ZVI_BM_RPC_L-FNAME =
ZTB_BM_RPC_L-FNAME .
ZVI_BM_RPC_L-DTYPE =
ZTB_BM_RPC_L-DTYPE .
ZVI_BM_RPC_L-DESEN =
ZTB_BM_RPC_L-DESEN .
ZVI_BM_RPC_L-DESVI =
ZTB_BM_RPC_L-DESVI .
ZVI_BM_RPC_L-CHUSR =
ZTB_BM_RPC_L-CHUSR .
ZVI_BM_RPC_L-CHDAT =
ZTB_BM_RPC_L-CHDAT .
ZVI_BM_RPC_L-CHTIM =
ZTB_BM_RPC_L-CHTIM .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_BM_RPC_L USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_BM_RPC_L-REPID TO
ZTB_BM_RPC_L-REPID .
MOVE ZVI_BM_RPC_L-EFMON TO
ZTB_BM_RPC_L-EFMON .
MOVE ZVI_BM_RPC_L-RPSEG TO
ZTB_BM_RPC_L-RPSEG .
MOVE ZVI_BM_RPC_L-RITEM TO
ZTB_BM_RPC_L-RITEM .
MOVE ZVI_BM_RPC_L-FNAME TO
ZTB_BM_RPC_L-FNAME .
MOVE ZVI_BM_RPC_L-MANDT TO
ZTB_BM_RPC_L-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_RPC_L'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_RPC_L TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_RPC_L'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_BM_RPC_LF...................................*
FORM GET_DATA_ZVI_BM_RPC_LF.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_RPC_LF WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_BM_RPC_LF .
ZVI_BM_RPC_LF-MANDT =
ZTB_BM_RPC_LF-MANDT .
ZVI_BM_RPC_LF-REPID =
ZTB_BM_RPC_LF-REPID .
ZVI_BM_RPC_LF-RPSEG =
ZTB_BM_RPC_LF-RPSEG .
ZVI_BM_RPC_LF-RITEM =
ZTB_BM_RPC_LF-RITEM .
ZVI_BM_RPC_LF-FNAME =
ZTB_BM_RPC_LF-FNAME .
ZVI_BM_RPC_LF-FDESC =
ZTB_BM_RPC_LF-FDESC .
ZVI_BM_RPC_LF-SRCDT =
ZTB_BM_RPC_LF-SRCDT .
ZVI_BM_RPC_LF-FXVAL =
ZTB_BM_RPC_LF-FXVAL .
ZVI_BM_RPC_LF-FUNCN =
ZTB_BM_RPC_LF-FUNCN .
    SELECT SINGLE * FROM ZTB_BM_RPC_SI WHERE
REPID = ZTB_BM_RPC_LF-REPID AND
RPSEG = ZTB_BM_RPC_LF-RPSEG AND
RITEM = ZTB_BM_RPC_LF-RITEM .
    IF SY-SUBRC EQ 0.
ZVI_BM_RPC_LF-RITNM =
ZTB_BM_RPC_SI-RITNM .
ZVI_BM_RPC_LF-ITMTY =
ZTB_BM_RPC_SI-ITMTY .
    ENDIF.
<VIM_TOTAL_STRUC> = ZVI_BM_RPC_LF.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_BM_RPC_LF .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_BM_RPC_LF.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_BM_RPC_LF-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_RPC_LF WHERE
  REPID = ZVI_BM_RPC_LF-REPID AND
  RPSEG = ZVI_BM_RPC_LF-RPSEG AND
  RITEM = ZVI_BM_RPC_LF-RITEM AND
  FNAME = ZVI_BM_RPC_LF-FNAME .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_RPC_LF .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_RPC_LF WHERE
  REPID = ZVI_BM_RPC_LF-REPID AND
  RPSEG = ZVI_BM_RPC_LF-RPSEG AND
  RITEM = ZVI_BM_RPC_LF-RITEM AND
  FNAME = ZVI_BM_RPC_LF-FNAME .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_RPC_LF.
    ENDIF.
ZTB_BM_RPC_LF-MANDT =
ZVI_BM_RPC_LF-MANDT .
ZTB_BM_RPC_LF-REPID =
ZVI_BM_RPC_LF-REPID .
ZTB_BM_RPC_LF-RPSEG =
ZVI_BM_RPC_LF-RPSEG .
ZTB_BM_RPC_LF-RITEM =
ZVI_BM_RPC_LF-RITEM .
ZTB_BM_RPC_LF-FNAME =
ZVI_BM_RPC_LF-FNAME .
ZTB_BM_RPC_LF-FDESC =
ZVI_BM_RPC_LF-FDESC .
ZTB_BM_RPC_LF-SRCDT =
ZVI_BM_RPC_LF-SRCDT .
ZTB_BM_RPC_LF-FXVAL =
ZVI_BM_RPC_LF-FXVAL .
ZTB_BM_RPC_LF-FUNCN =
ZVI_BM_RPC_LF-FUNCN .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_RPC_LF ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_RPC_LF .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_BM_RPC_LF-UPD_FLAG,
STATUS_ZVI_BM_RPC_LF-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_BM_RPC_LF.
  SELECT SINGLE * FROM ZTB_BM_RPC_LF WHERE
REPID = ZVI_BM_RPC_LF-REPID AND
RPSEG = ZVI_BM_RPC_LF-RPSEG AND
RITEM = ZVI_BM_RPC_LF-RITEM AND
FNAME = ZVI_BM_RPC_LF-FNAME .
ZVI_BM_RPC_LF-MANDT =
ZTB_BM_RPC_LF-MANDT .
ZVI_BM_RPC_LF-REPID =
ZTB_BM_RPC_LF-REPID .
ZVI_BM_RPC_LF-RPSEG =
ZTB_BM_RPC_LF-RPSEG .
ZVI_BM_RPC_LF-RITEM =
ZTB_BM_RPC_LF-RITEM .
ZVI_BM_RPC_LF-FNAME =
ZTB_BM_RPC_LF-FNAME .
ZVI_BM_RPC_LF-FDESC =
ZTB_BM_RPC_LF-FDESC .
ZVI_BM_RPC_LF-SRCDT =
ZTB_BM_RPC_LF-SRCDT .
ZVI_BM_RPC_LF-FXVAL =
ZTB_BM_RPC_LF-FXVAL .
ZVI_BM_RPC_LF-FUNCN =
ZTB_BM_RPC_LF-FUNCN .
    SELECT SINGLE * FROM ZTB_BM_RPC_SI WHERE
REPID = ZTB_BM_RPC_LF-REPID AND
RPSEG = ZTB_BM_RPC_LF-RPSEG AND
RITEM = ZTB_BM_RPC_LF-RITEM .
    IF SY-SUBRC EQ 0.
ZVI_BM_RPC_LF-RITNM =
ZTB_BM_RPC_SI-RITNM .
ZVI_BM_RPC_LF-ITMTY =
ZTB_BM_RPC_SI-ITMTY .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZVI_BM_RPC_LF-RITNM .
      CLEAR ZVI_BM_RPC_LF-ITMTY .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_BM_RPC_LF USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_BM_RPC_LF-REPID TO
ZTB_BM_RPC_LF-REPID .
MOVE ZVI_BM_RPC_LF-RPSEG TO
ZTB_BM_RPC_LF-RPSEG .
MOVE ZVI_BM_RPC_LF-RITEM TO
ZTB_BM_RPC_LF-RITEM .
MOVE ZVI_BM_RPC_LF-FNAME TO
ZTB_BM_RPC_LF-FNAME .
MOVE ZVI_BM_RPC_LF-MANDT TO
ZTB_BM_RPC_LF-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_RPC_LF'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_RPC_LF TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_RPC_LF'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
FORM COMPL_ZVI_BM_RPC_LF USING WORKAREA.
*      provides (read-only) fields from secondary tables related
*      to primary tables by foreignkey relationships
ZTB_BM_RPC_LF-MANDT =
ZVI_BM_RPC_LF-MANDT .
ZTB_BM_RPC_LF-REPID =
ZVI_BM_RPC_LF-REPID .
ZTB_BM_RPC_LF-RPSEG =
ZVI_BM_RPC_LF-RPSEG .
ZTB_BM_RPC_LF-RITEM =
ZVI_BM_RPC_LF-RITEM .
ZTB_BM_RPC_LF-FNAME =
ZVI_BM_RPC_LF-FNAME .
ZTB_BM_RPC_LF-FDESC =
ZVI_BM_RPC_LF-FDESC .
ZTB_BM_RPC_LF-SRCDT =
ZVI_BM_RPC_LF-SRCDT .
ZTB_BM_RPC_LF-FXVAL =
ZVI_BM_RPC_LF-FXVAL .
ZTB_BM_RPC_LF-FUNCN =
ZVI_BM_RPC_LF-FUNCN .
    SELECT SINGLE * FROM ZTB_BM_RPC_SI WHERE
REPID = ZTB_BM_RPC_LF-REPID AND
RPSEG = ZTB_BM_RPC_LF-RPSEG AND
RITEM = ZTB_BM_RPC_LF-RITEM .
    IF SY-SUBRC EQ 0.
ZVI_BM_RPC_LF-RITNM =
ZTB_BM_RPC_SI-RITNM .
ZVI_BM_RPC_LF-ITMTY =
ZTB_BM_RPC_SI-ITMTY .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZVI_BM_RPC_LF-RITNM .
      CLEAR ZVI_BM_RPC_LF-ITMTY .
    ENDIF.
ENDFORM.
*...processing: ZVI_BM_RPC_R....................................*
FORM GET_DATA_ZVI_BM_RPC_R.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_RPC_R WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_BM_RPC_R .
ZVI_BM_RPC_R-MANDT =
ZTB_BM_RPC_R-MANDT .
ZVI_BM_RPC_R-REPID =
ZTB_BM_RPC_R-REPID .
ZVI_BM_RPC_R-REPNM =
ZTB_BM_RPC_R-REPNM .
<VIM_TOTAL_STRUC> = ZVI_BM_RPC_R.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_BM_RPC_R .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_BM_RPC_R.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_BM_RPC_R-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_RPC_R WHERE
  REPID = ZVI_BM_RPC_R-REPID .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_RPC_R .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_RPC_R WHERE
  REPID = ZVI_BM_RPC_R-REPID .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_RPC_R.
    ENDIF.
ZTB_BM_RPC_R-MANDT =
ZVI_BM_RPC_R-MANDT .
ZTB_BM_RPC_R-REPID =
ZVI_BM_RPC_R-REPID .
ZTB_BM_RPC_R-REPNM =
ZVI_BM_RPC_R-REPNM .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_RPC_R ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_RPC_R .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_BM_RPC_R-UPD_FLAG,
STATUS_ZVI_BM_RPC_R-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_BM_RPC_R.
  SELECT SINGLE * FROM ZTB_BM_RPC_R WHERE
REPID = ZVI_BM_RPC_R-REPID .
ZVI_BM_RPC_R-MANDT =
ZTB_BM_RPC_R-MANDT .
ZVI_BM_RPC_R-REPID =
ZTB_BM_RPC_R-REPID .
ZVI_BM_RPC_R-REPNM =
ZTB_BM_RPC_R-REPNM .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_BM_RPC_R USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_BM_RPC_R-REPID TO
ZTB_BM_RPC_R-REPID .
MOVE ZVI_BM_RPC_R-MANDT TO
ZTB_BM_RPC_R-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_RPC_R'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_RPC_R TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_RPC_R'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_BM_RPC_S....................................*
FORM GET_DATA_ZVI_BM_RPC_S.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_RPC_S WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_BM_RPC_S .
ZVI_BM_RPC_S-MANDT =
ZTB_BM_RPC_S-MANDT .
ZVI_BM_RPC_S-REPID =
ZTB_BM_RPC_S-REPID .
ZVI_BM_RPC_S-RPSEG =
ZTB_BM_RPC_S-RPSEG .
ZVI_BM_RPC_S-RPSNM =
ZTB_BM_RPC_S-RPSNM .
    SELECT SINGLE * FROM ZTB_BM_RPC_R WHERE
REPID = ZTB_BM_RPC_S-REPID .
    IF SY-SUBRC EQ 0.
ZVI_BM_RPC_S-REPNM =
ZTB_BM_RPC_R-REPNM .
    ENDIF.
<VIM_TOTAL_STRUC> = ZVI_BM_RPC_S.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_BM_RPC_S .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_BM_RPC_S.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_BM_RPC_S-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_RPC_S WHERE
  REPID = ZVI_BM_RPC_S-REPID AND
  RPSEG = ZVI_BM_RPC_S-RPSEG .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_RPC_S .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_RPC_S WHERE
  REPID = ZVI_BM_RPC_S-REPID AND
  RPSEG = ZVI_BM_RPC_S-RPSEG .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_RPC_S.
    ENDIF.
ZTB_BM_RPC_S-MANDT =
ZVI_BM_RPC_S-MANDT .
ZTB_BM_RPC_S-REPID =
ZVI_BM_RPC_S-REPID .
ZTB_BM_RPC_S-RPSEG =
ZVI_BM_RPC_S-RPSEG .
ZTB_BM_RPC_S-RPSNM =
ZVI_BM_RPC_S-RPSNM .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_RPC_S ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_RPC_S .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_BM_RPC_S-UPD_FLAG,
STATUS_ZVI_BM_RPC_S-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_BM_RPC_S.
  SELECT SINGLE * FROM ZTB_BM_RPC_S WHERE
REPID = ZVI_BM_RPC_S-REPID AND
RPSEG = ZVI_BM_RPC_S-RPSEG .
ZVI_BM_RPC_S-MANDT =
ZTB_BM_RPC_S-MANDT .
ZVI_BM_RPC_S-REPID =
ZTB_BM_RPC_S-REPID .
ZVI_BM_RPC_S-RPSEG =
ZTB_BM_RPC_S-RPSEG .
ZVI_BM_RPC_S-RPSNM =
ZTB_BM_RPC_S-RPSNM .
    SELECT SINGLE * FROM ZTB_BM_RPC_R WHERE
REPID = ZTB_BM_RPC_S-REPID .
    IF SY-SUBRC EQ 0.
ZVI_BM_RPC_S-REPNM =
ZTB_BM_RPC_R-REPNM .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZVI_BM_RPC_S-REPNM .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_BM_RPC_S USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_BM_RPC_S-REPID TO
ZTB_BM_RPC_S-REPID .
MOVE ZVI_BM_RPC_S-RPSEG TO
ZTB_BM_RPC_S-RPSEG .
MOVE ZVI_BM_RPC_S-MANDT TO
ZTB_BM_RPC_S-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_RPC_S'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_RPC_S TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_RPC_S'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
FORM COMPL_ZVI_BM_RPC_S USING WORKAREA.
*      provides (read-only) fields from secondary tables related
*      to primary tables by foreignkey relationships
ZTB_BM_RPC_S-MANDT =
ZVI_BM_RPC_S-MANDT .
ZTB_BM_RPC_S-REPID =
ZVI_BM_RPC_S-REPID .
ZTB_BM_RPC_S-RPSEG =
ZVI_BM_RPC_S-RPSEG .
ZTB_BM_RPC_S-RPSNM =
ZVI_BM_RPC_S-RPSNM .
    SELECT SINGLE * FROM ZTB_BM_RPC_R WHERE
REPID = ZTB_BM_RPC_S-REPID .
    IF SY-SUBRC EQ 0.
ZVI_BM_RPC_S-REPNM =
ZTB_BM_RPC_R-REPNM .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZVI_BM_RPC_S-REPNM .
    ENDIF.
ENDFORM.
*...processing: ZVI_BM_RPC_SI...................................*
FORM GET_DATA_ZVI_BM_RPC_SI.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_RPC_SI WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_BM_RPC_SI .
ZVI_BM_RPC_SI-MANDT =
ZTB_BM_RPC_SI-MANDT .
ZVI_BM_RPC_SI-REPID =
ZTB_BM_RPC_SI-REPID .
ZVI_BM_RPC_SI-RPSEG =
ZTB_BM_RPC_SI-RPSEG .
ZVI_BM_RPC_SI-RITEM =
ZTB_BM_RPC_SI-RITEM .
ZVI_BM_RPC_SI-RITNM =
ZTB_BM_RPC_SI-RITNM .
ZVI_BM_RPC_SI-ITMTY =
ZTB_BM_RPC_SI-ITMTY .
ZVI_BM_RPC_SI-VERSN =
ZTB_BM_RPC_SI-VERSN .
ZVI_BM_RPC_SI-TEMPL =
ZTB_BM_RPC_SI-TEMPL .
ZVI_BM_RPC_SI-SRCTAB =
ZTB_BM_RPC_SI-SRCTAB .
    SELECT SINGLE * FROM ZTB_BM_RPC_S WHERE
REPID = ZTB_BM_RPC_SI-REPID AND
RPSEG = ZTB_BM_RPC_SI-RPSEG .
    IF SY-SUBRC EQ 0.
ZVI_BM_RPC_SI-RPSNM =
ZTB_BM_RPC_S-RPSNM .
      SELECT SINGLE * FROM ZTB_BM_RPC_R WHERE
REPID = ZTB_BM_RPC_S-REPID .
      IF SY-SUBRC EQ 0.
ZVI_BM_RPC_SI-REPNM =
ZTB_BM_RPC_R-REPNM .
      ENDIF.
    ENDIF.
    SELECT SINGLE * FROM ZTB_BM_RPC_T WHERE
TEMPL = ZTB_BM_RPC_SI-TEMPL .
    IF SY-SUBRC EQ 0.
    ENDIF.
<VIM_TOTAL_STRUC> = ZVI_BM_RPC_SI.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_BM_RPC_SI .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_BM_RPC_SI.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_BM_RPC_SI-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_RPC_SI WHERE
  REPID = ZVI_BM_RPC_SI-REPID AND
  RPSEG = ZVI_BM_RPC_SI-RPSEG AND
  RITEM = ZVI_BM_RPC_SI-RITEM .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_RPC_SI .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_RPC_SI WHERE
  REPID = ZVI_BM_RPC_SI-REPID AND
  RPSEG = ZVI_BM_RPC_SI-RPSEG AND
  RITEM = ZVI_BM_RPC_SI-RITEM .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_RPC_SI.
    ENDIF.
ZTB_BM_RPC_SI-MANDT =
ZVI_BM_RPC_SI-MANDT .
ZTB_BM_RPC_SI-REPID =
ZVI_BM_RPC_SI-REPID .
ZTB_BM_RPC_SI-RPSEG =
ZVI_BM_RPC_SI-RPSEG .
ZTB_BM_RPC_SI-RITEM =
ZVI_BM_RPC_SI-RITEM .
ZTB_BM_RPC_SI-RITNM =
ZVI_BM_RPC_SI-RITNM .
ZTB_BM_RPC_SI-ITMTY =
ZVI_BM_RPC_SI-ITMTY .
ZTB_BM_RPC_SI-VERSN =
ZVI_BM_RPC_SI-VERSN .
ZTB_BM_RPC_SI-TEMPL =
ZVI_BM_RPC_SI-TEMPL .
ZTB_BM_RPC_SI-SRCTAB =
ZVI_BM_RPC_SI-SRCTAB .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_RPC_SI ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_RPC_SI .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_BM_RPC_SI-UPD_FLAG,
STATUS_ZVI_BM_RPC_SI-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_BM_RPC_SI.
  SELECT SINGLE * FROM ZTB_BM_RPC_SI WHERE
REPID = ZVI_BM_RPC_SI-REPID AND
RPSEG = ZVI_BM_RPC_SI-RPSEG AND
RITEM = ZVI_BM_RPC_SI-RITEM .
ZVI_BM_RPC_SI-MANDT =
ZTB_BM_RPC_SI-MANDT .
ZVI_BM_RPC_SI-REPID =
ZTB_BM_RPC_SI-REPID .
ZVI_BM_RPC_SI-RPSEG =
ZTB_BM_RPC_SI-RPSEG .
ZVI_BM_RPC_SI-RITEM =
ZTB_BM_RPC_SI-RITEM .
ZVI_BM_RPC_SI-RITNM =
ZTB_BM_RPC_SI-RITNM .
ZVI_BM_RPC_SI-ITMTY =
ZTB_BM_RPC_SI-ITMTY .
ZVI_BM_RPC_SI-VERSN =
ZTB_BM_RPC_SI-VERSN .
ZVI_BM_RPC_SI-TEMPL =
ZTB_BM_RPC_SI-TEMPL .
ZVI_BM_RPC_SI-SRCTAB =
ZTB_BM_RPC_SI-SRCTAB .
    SELECT SINGLE * FROM ZTB_BM_RPC_S WHERE
REPID = ZTB_BM_RPC_SI-REPID AND
RPSEG = ZTB_BM_RPC_SI-RPSEG .
    IF SY-SUBRC EQ 0.
ZVI_BM_RPC_SI-RPSNM =
ZTB_BM_RPC_S-RPSNM .
      SELECT SINGLE * FROM ZTB_BM_RPC_R WHERE
REPID = ZTB_BM_RPC_S-REPID .
      IF SY-SUBRC EQ 0.
ZVI_BM_RPC_SI-REPNM =
ZTB_BM_RPC_R-REPNM .
      ELSE.
        CLEAR SY-SUBRC.
        CLEAR ZVI_BM_RPC_SI-REPNM .
      ENDIF.
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZVI_BM_RPC_SI-RPSNM .
      CLEAR ZVI_BM_RPC_SI-REPNM .
    ENDIF.
    SELECT SINGLE * FROM ZTB_BM_RPC_T WHERE
TEMPL = ZTB_BM_RPC_SI-TEMPL .
    IF SY-SUBRC EQ 0.
    ELSE.
      CLEAR SY-SUBRC.
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_BM_RPC_SI USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_BM_RPC_SI-REPID TO
ZTB_BM_RPC_SI-REPID .
MOVE ZVI_BM_RPC_SI-RPSEG TO
ZTB_BM_RPC_SI-RPSEG .
MOVE ZVI_BM_RPC_SI-RITEM TO
ZTB_BM_RPC_SI-RITEM .
MOVE ZVI_BM_RPC_SI-MANDT TO
ZTB_BM_RPC_SI-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_RPC_SI'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_RPC_SI TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_RPC_SI'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
FORM COMPL_ZVI_BM_RPC_SI USING WORKAREA.
*      provides (read-only) fields from secondary tables related
*      to primary tables by foreignkey relationships
ZTB_BM_RPC_SI-MANDT =
ZVI_BM_RPC_SI-MANDT .
ZTB_BM_RPC_SI-REPID =
ZVI_BM_RPC_SI-REPID .
ZTB_BM_RPC_SI-RPSEG =
ZVI_BM_RPC_SI-RPSEG .
ZTB_BM_RPC_SI-RITEM =
ZVI_BM_RPC_SI-RITEM .
ZTB_BM_RPC_SI-RITNM =
ZVI_BM_RPC_SI-RITNM .
ZTB_BM_RPC_SI-ITMTY =
ZVI_BM_RPC_SI-ITMTY .
ZTB_BM_RPC_SI-VERSN =
ZVI_BM_RPC_SI-VERSN .
ZTB_BM_RPC_SI-TEMPL =
ZVI_BM_RPC_SI-TEMPL .
ZTB_BM_RPC_SI-SRCTAB =
ZVI_BM_RPC_SI-SRCTAB .
    SELECT SINGLE * FROM ZTB_BM_RPC_S WHERE
REPID = ZTB_BM_RPC_SI-REPID AND
RPSEG = ZTB_BM_RPC_SI-RPSEG .
    IF SY-SUBRC EQ 0.
ZVI_BM_RPC_SI-RPSNM =
ZTB_BM_RPC_S-RPSNM .
      SELECT SINGLE * FROM ZTB_BM_RPC_R WHERE
REPID = ZTB_BM_RPC_S-REPID .
      IF SY-SUBRC EQ 0.
ZVI_BM_RPC_SI-REPNM =
ZTB_BM_RPC_R-REPNM .
      ELSE.
        CLEAR SY-SUBRC.
        CLEAR ZVI_BM_RPC_SI-REPNM .
      ENDIF.
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZVI_BM_RPC_SI-RPSNM .
      CLEAR ZVI_BM_RPC_SI-REPNM .
    ENDIF.
    SELECT SINGLE * FROM ZTB_BM_RPC_T WHERE
TEMPL = ZTB_BM_RPC_SI-TEMPL .
    IF SY-SUBRC EQ 0.
    ELSE.
      CLEAR SY-SUBRC.
    ENDIF.
ENDFORM.
*...processing: ZVI_BM_RPC_SIC..................................*
FORM GET_DATA_ZVI_BM_RPC_SIC.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_RPC_SIC WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_BM_RPC_SIC .
ZVI_BM_RPC_SIC-MANDT =
ZTB_BM_RPC_SIC-MANDT .
ZVI_BM_RPC_SIC-REPID =
ZTB_BM_RPC_SIC-REPID .
ZVI_BM_RPC_SIC-RPSEG =
ZTB_BM_RPC_SIC-RPSEG .
ZVI_BM_RPC_SIC-RITEM =
ZTB_BM_RPC_SIC-RITEM .
ZVI_BM_RPC_SIC-COLNO =
ZTB_BM_RPC_SIC-COLNO .
ZVI_BM_RPC_SIC-FIELDNAME =
ZTB_BM_RPC_SIC-FIELDNAME .
ZVI_BM_RPC_SIC-LEADCOL =
ZTB_BM_RPC_SIC-LEADCOL .
ZVI_BM_RPC_SIC-FIGTY =
ZTB_BM_RPC_SIC-FIGTY .
ZVI_BM_RPC_SIC-KEYFIG =
ZTB_BM_RPC_SIC-KEYFIG .
ZVI_BM_RPC_SIC-FORMULA =
ZTB_BM_RPC_SIC-FORMULA .
ZVI_BM_RPC_SIC-DESCR =
ZTB_BM_RPC_SIC-DESCR .
<VIM_TOTAL_STRUC> = ZVI_BM_RPC_SIC.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_BM_RPC_SIC .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_BM_RPC_SIC.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_BM_RPC_SIC-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_RPC_SIC WHERE
  REPID = ZVI_BM_RPC_SIC-REPID AND
  RPSEG = ZVI_BM_RPC_SIC-RPSEG AND
  RITEM = ZVI_BM_RPC_SIC-RITEM AND
  COLNO = ZVI_BM_RPC_SIC-COLNO .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_RPC_SIC .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_RPC_SIC WHERE
  REPID = ZVI_BM_RPC_SIC-REPID AND
  RPSEG = ZVI_BM_RPC_SIC-RPSEG AND
  RITEM = ZVI_BM_RPC_SIC-RITEM AND
  COLNO = ZVI_BM_RPC_SIC-COLNO .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_RPC_SIC.
    ENDIF.
ZTB_BM_RPC_SIC-MANDT =
ZVI_BM_RPC_SIC-MANDT .
ZTB_BM_RPC_SIC-REPID =
ZVI_BM_RPC_SIC-REPID .
ZTB_BM_RPC_SIC-RPSEG =
ZVI_BM_RPC_SIC-RPSEG .
ZTB_BM_RPC_SIC-RITEM =
ZVI_BM_RPC_SIC-RITEM .
ZTB_BM_RPC_SIC-COLNO =
ZVI_BM_RPC_SIC-COLNO .
ZTB_BM_RPC_SIC-FIELDNAME =
ZVI_BM_RPC_SIC-FIELDNAME .
ZTB_BM_RPC_SIC-LEADCOL =
ZVI_BM_RPC_SIC-LEADCOL .
ZTB_BM_RPC_SIC-FIGTY =
ZVI_BM_RPC_SIC-FIGTY .
ZTB_BM_RPC_SIC-KEYFIG =
ZVI_BM_RPC_SIC-KEYFIG .
ZTB_BM_RPC_SIC-FORMULA =
ZVI_BM_RPC_SIC-FORMULA .
ZTB_BM_RPC_SIC-DESCR =
ZVI_BM_RPC_SIC-DESCR .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_RPC_SIC ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_RPC_SIC .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_BM_RPC_SIC-UPD_FLAG,
STATUS_ZVI_BM_RPC_SIC-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_BM_RPC_SIC.
  SELECT SINGLE * FROM ZTB_BM_RPC_SIC WHERE
REPID = ZVI_BM_RPC_SIC-REPID AND
RPSEG = ZVI_BM_RPC_SIC-RPSEG AND
RITEM = ZVI_BM_RPC_SIC-RITEM AND
COLNO = ZVI_BM_RPC_SIC-COLNO .
ZVI_BM_RPC_SIC-MANDT =
ZTB_BM_RPC_SIC-MANDT .
ZVI_BM_RPC_SIC-REPID =
ZTB_BM_RPC_SIC-REPID .
ZVI_BM_RPC_SIC-RPSEG =
ZTB_BM_RPC_SIC-RPSEG .
ZVI_BM_RPC_SIC-RITEM =
ZTB_BM_RPC_SIC-RITEM .
ZVI_BM_RPC_SIC-COLNO =
ZTB_BM_RPC_SIC-COLNO .
ZVI_BM_RPC_SIC-FIELDNAME =
ZTB_BM_RPC_SIC-FIELDNAME .
ZVI_BM_RPC_SIC-LEADCOL =
ZTB_BM_RPC_SIC-LEADCOL .
ZVI_BM_RPC_SIC-FIGTY =
ZTB_BM_RPC_SIC-FIGTY .
ZVI_BM_RPC_SIC-KEYFIG =
ZTB_BM_RPC_SIC-KEYFIG .
ZVI_BM_RPC_SIC-FORMULA =
ZTB_BM_RPC_SIC-FORMULA .
ZVI_BM_RPC_SIC-DESCR =
ZTB_BM_RPC_SIC-DESCR .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_BM_RPC_SIC USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_BM_RPC_SIC-REPID TO
ZTB_BM_RPC_SIC-REPID .
MOVE ZVI_BM_RPC_SIC-RPSEG TO
ZTB_BM_RPC_SIC-RPSEG .
MOVE ZVI_BM_RPC_SIC-RITEM TO
ZTB_BM_RPC_SIC-RITEM .
MOVE ZVI_BM_RPC_SIC-COLNO TO
ZTB_BM_RPC_SIC-COLNO .
MOVE ZVI_BM_RPC_SIC-MANDT TO
ZTB_BM_RPC_SIC-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_RPC_SIC'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_RPC_SIC TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_RPC_SIC'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_BM_RPC_SICC.................................*
FORM GET_DATA_ZVI_BM_RPC_SICC.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_RPC_SICC WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_BM_RPC_SICC .
ZVI_BM_RPC_SICC-MANDT =
ZTB_BM_RPC_SICC-MANDT .
ZVI_BM_RPC_SICC-REPID =
ZTB_BM_RPC_SICC-REPID .
ZVI_BM_RPC_SICC-RPSEG =
ZTB_BM_RPC_SICC-RPSEG .
ZVI_BM_RPC_SICC-RITEM =
ZTB_BM_RPC_SICC-RITEM .
ZVI_BM_RPC_SICC-COLNO =
ZTB_BM_RPC_SICC-COLNO .
ZVI_BM_RPC_SICC-CONDID =
ZTB_BM_RPC_SICC-CONDID .
ZVI_BM_RPC_SICC-RTABLE =
ZTB_BM_RPC_SICC-RTABLE .
ZVI_BM_RPC_SICC-RFIELD =
ZTB_BM_RPC_SICC-RFIELD .
ZVI_BM_RPC_SICC-RANGID =
ZTB_BM_RPC_SICC-RANGID .
ZVI_BM_RPC_SICC-RSIGN =
ZTB_BM_RPC_SICC-RSIGN .
ZVI_BM_RPC_SICC-ROPTI =
ZTB_BM_RPC_SICC-ROPTI .
ZVI_BM_RPC_SICC-RLOW =
ZTB_BM_RPC_SICC-RLOW .
ZVI_BM_RPC_SICC-RHIGH =
ZTB_BM_RPC_SICC-RHIGH .
<VIM_TOTAL_STRUC> = ZVI_BM_RPC_SICC.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_BM_RPC_SICC .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_BM_RPC_SICC.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_BM_RPC_SICC-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_RPC_SICC WHERE
  REPID = ZVI_BM_RPC_SICC-REPID AND
  RPSEG = ZVI_BM_RPC_SICC-RPSEG AND
  RITEM = ZVI_BM_RPC_SICC-RITEM AND
  COLNO = ZVI_BM_RPC_SICC-COLNO AND
  CONDID = ZVI_BM_RPC_SICC-CONDID AND
  RTABLE = ZVI_BM_RPC_SICC-RTABLE AND
  RFIELD = ZVI_BM_RPC_SICC-RFIELD AND
  RANGID = ZVI_BM_RPC_SICC-RANGID .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_RPC_SICC .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_RPC_SICC WHERE
  REPID = ZVI_BM_RPC_SICC-REPID AND
  RPSEG = ZVI_BM_RPC_SICC-RPSEG AND
  RITEM = ZVI_BM_RPC_SICC-RITEM AND
  COLNO = ZVI_BM_RPC_SICC-COLNO AND
  CONDID = ZVI_BM_RPC_SICC-CONDID AND
  RTABLE = ZVI_BM_RPC_SICC-RTABLE AND
  RFIELD = ZVI_BM_RPC_SICC-RFIELD AND
  RANGID = ZVI_BM_RPC_SICC-RANGID .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_RPC_SICC.
    ENDIF.
ZTB_BM_RPC_SICC-MANDT =
ZVI_BM_RPC_SICC-MANDT .
ZTB_BM_RPC_SICC-REPID =
ZVI_BM_RPC_SICC-REPID .
ZTB_BM_RPC_SICC-RPSEG =
ZVI_BM_RPC_SICC-RPSEG .
ZTB_BM_RPC_SICC-RITEM =
ZVI_BM_RPC_SICC-RITEM .
ZTB_BM_RPC_SICC-COLNO =
ZVI_BM_RPC_SICC-COLNO .
ZTB_BM_RPC_SICC-CONDID =
ZVI_BM_RPC_SICC-CONDID .
ZTB_BM_RPC_SICC-RTABLE =
ZVI_BM_RPC_SICC-RTABLE .
ZTB_BM_RPC_SICC-RFIELD =
ZVI_BM_RPC_SICC-RFIELD .
ZTB_BM_RPC_SICC-RANGID =
ZVI_BM_RPC_SICC-RANGID .
ZTB_BM_RPC_SICC-RSIGN =
ZVI_BM_RPC_SICC-RSIGN .
ZTB_BM_RPC_SICC-ROPTI =
ZVI_BM_RPC_SICC-ROPTI .
ZTB_BM_RPC_SICC-RLOW =
ZVI_BM_RPC_SICC-RLOW .
ZTB_BM_RPC_SICC-RHIGH =
ZVI_BM_RPC_SICC-RHIGH .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_RPC_SICC ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_RPC_SICC .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_BM_RPC_SICC-UPD_FLAG,
STATUS_ZVI_BM_RPC_SICC-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_BM_RPC_SICC.
  SELECT SINGLE * FROM ZTB_BM_RPC_SICC WHERE
REPID = ZVI_BM_RPC_SICC-REPID AND
RPSEG = ZVI_BM_RPC_SICC-RPSEG AND
RITEM = ZVI_BM_RPC_SICC-RITEM AND
COLNO = ZVI_BM_RPC_SICC-COLNO AND
CONDID = ZVI_BM_RPC_SICC-CONDID AND
RTABLE = ZVI_BM_RPC_SICC-RTABLE AND
RFIELD = ZVI_BM_RPC_SICC-RFIELD AND
RANGID = ZVI_BM_RPC_SICC-RANGID .
ZVI_BM_RPC_SICC-MANDT =
ZTB_BM_RPC_SICC-MANDT .
ZVI_BM_RPC_SICC-REPID =
ZTB_BM_RPC_SICC-REPID .
ZVI_BM_RPC_SICC-RPSEG =
ZTB_BM_RPC_SICC-RPSEG .
ZVI_BM_RPC_SICC-RITEM =
ZTB_BM_RPC_SICC-RITEM .
ZVI_BM_RPC_SICC-COLNO =
ZTB_BM_RPC_SICC-COLNO .
ZVI_BM_RPC_SICC-CONDID =
ZTB_BM_RPC_SICC-CONDID .
ZVI_BM_RPC_SICC-RTABLE =
ZTB_BM_RPC_SICC-RTABLE .
ZVI_BM_RPC_SICC-RFIELD =
ZTB_BM_RPC_SICC-RFIELD .
ZVI_BM_RPC_SICC-RANGID =
ZTB_BM_RPC_SICC-RANGID .
ZVI_BM_RPC_SICC-RSIGN =
ZTB_BM_RPC_SICC-RSIGN .
ZVI_BM_RPC_SICC-ROPTI =
ZTB_BM_RPC_SICC-ROPTI .
ZVI_BM_RPC_SICC-RLOW =
ZTB_BM_RPC_SICC-RLOW .
ZVI_BM_RPC_SICC-RHIGH =
ZTB_BM_RPC_SICC-RHIGH .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_BM_RPC_SICC USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_BM_RPC_SICC-REPID TO
ZTB_BM_RPC_SICC-REPID .
MOVE ZVI_BM_RPC_SICC-RPSEG TO
ZTB_BM_RPC_SICC-RPSEG .
MOVE ZVI_BM_RPC_SICC-RITEM TO
ZTB_BM_RPC_SICC-RITEM .
MOVE ZVI_BM_RPC_SICC-COLNO TO
ZTB_BM_RPC_SICC-COLNO .
MOVE ZVI_BM_RPC_SICC-CONDID TO
ZTB_BM_RPC_SICC-CONDID .
MOVE ZVI_BM_RPC_SICC-RTABLE TO
ZTB_BM_RPC_SICC-RTABLE .
MOVE ZVI_BM_RPC_SICC-RFIELD TO
ZTB_BM_RPC_SICC-RFIELD .
MOVE ZVI_BM_RPC_SICC-RANGID TO
ZTB_BM_RPC_SICC-RANGID .
MOVE ZVI_BM_RPC_SICC-MANDT TO
ZTB_BM_RPC_SICC-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_RPC_SICC'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_RPC_SICC TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_RPC_SICC'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_BM_RPC_SIR..................................*
FORM GET_DATA_ZVI_BM_RPC_SIR.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_RPC_SIR WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_BM_RPC_SIR .
ZVI_BM_RPC_SIR-MANDT =
ZTB_BM_RPC_SIR-MANDT .
ZVI_BM_RPC_SIR-REPID =
ZTB_BM_RPC_SIR-REPID .
ZVI_BM_RPC_SIR-RPSEG =
ZTB_BM_RPC_SIR-RPSEG .
ZVI_BM_RPC_SIR-RITEM =
ZTB_BM_RPC_SIR-RITEM .
ZVI_BM_RPC_SIR-HROW =
ZTB_BM_RPC_SIR-HROW .
ZVI_BM_RPC_SIR-ROWNO =
ZTB_BM_RPC_SIR-ROWNO .
ZVI_BM_RPC_SIR-FIGTY =
ZTB_BM_RPC_SIR-FIGTY .
ZVI_BM_RPC_SIR-KEYFIG =
ZTB_BM_RPC_SIR-KEYFIG .
ZVI_BM_RPC_SIR-FORMULA =
ZTB_BM_RPC_SIR-FORMULA .
ZVI_BM_RPC_SIR-DESCR =
ZTB_BM_RPC_SIR-DESCR .
<VIM_TOTAL_STRUC> = ZVI_BM_RPC_SIR.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_BM_RPC_SIR .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_BM_RPC_SIR.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_BM_RPC_SIR-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_RPC_SIR WHERE
  REPID = ZVI_BM_RPC_SIR-REPID AND
  RPSEG = ZVI_BM_RPC_SIR-RPSEG AND
  RITEM = ZVI_BM_RPC_SIR-RITEM AND
  ROWNO = ZVI_BM_RPC_SIR-ROWNO AND
  HROW = ZVI_BM_RPC_SIR-HROW .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_RPC_SIR .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_RPC_SIR WHERE
  REPID = ZVI_BM_RPC_SIR-REPID AND
  RPSEG = ZVI_BM_RPC_SIR-RPSEG AND
  RITEM = ZVI_BM_RPC_SIR-RITEM AND
  ROWNO = ZVI_BM_RPC_SIR-ROWNO AND
  HROW = ZVI_BM_RPC_SIR-HROW .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_RPC_SIR.
    ENDIF.
ZTB_BM_RPC_SIR-MANDT =
ZVI_BM_RPC_SIR-MANDT .
ZTB_BM_RPC_SIR-REPID =
ZVI_BM_RPC_SIR-REPID .
ZTB_BM_RPC_SIR-RPSEG =
ZVI_BM_RPC_SIR-RPSEG .
ZTB_BM_RPC_SIR-RITEM =
ZVI_BM_RPC_SIR-RITEM .
ZTB_BM_RPC_SIR-HROW =
ZVI_BM_RPC_SIR-HROW .
ZTB_BM_RPC_SIR-ROWNO =
ZVI_BM_RPC_SIR-ROWNO .
ZTB_BM_RPC_SIR-FIGTY =
ZVI_BM_RPC_SIR-FIGTY .
ZTB_BM_RPC_SIR-KEYFIG =
ZVI_BM_RPC_SIR-KEYFIG .
ZTB_BM_RPC_SIR-FORMULA =
ZVI_BM_RPC_SIR-FORMULA .
ZTB_BM_RPC_SIR-DESCR =
ZVI_BM_RPC_SIR-DESCR .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_RPC_SIR ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_RPC_SIR .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_BM_RPC_SIR-UPD_FLAG,
STATUS_ZVI_BM_RPC_SIR-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_BM_RPC_SIR.
  SELECT SINGLE * FROM ZTB_BM_RPC_SIR WHERE
REPID = ZVI_BM_RPC_SIR-REPID AND
RPSEG = ZVI_BM_RPC_SIR-RPSEG AND
RITEM = ZVI_BM_RPC_SIR-RITEM AND
ROWNO = ZVI_BM_RPC_SIR-ROWNO AND
HROW = ZVI_BM_RPC_SIR-HROW .
ZVI_BM_RPC_SIR-MANDT =
ZTB_BM_RPC_SIR-MANDT .
ZVI_BM_RPC_SIR-REPID =
ZTB_BM_RPC_SIR-REPID .
ZVI_BM_RPC_SIR-RPSEG =
ZTB_BM_RPC_SIR-RPSEG .
ZVI_BM_RPC_SIR-RITEM =
ZTB_BM_RPC_SIR-RITEM .
ZVI_BM_RPC_SIR-HROW =
ZTB_BM_RPC_SIR-HROW .
ZVI_BM_RPC_SIR-ROWNO =
ZTB_BM_RPC_SIR-ROWNO .
ZVI_BM_RPC_SIR-FIGTY =
ZTB_BM_RPC_SIR-FIGTY .
ZVI_BM_RPC_SIR-KEYFIG =
ZTB_BM_RPC_SIR-KEYFIG .
ZVI_BM_RPC_SIR-FORMULA =
ZTB_BM_RPC_SIR-FORMULA .
ZVI_BM_RPC_SIR-DESCR =
ZTB_BM_RPC_SIR-DESCR .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_BM_RPC_SIR USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_BM_RPC_SIR-REPID TO
ZTB_BM_RPC_SIR-REPID .
MOVE ZVI_BM_RPC_SIR-RPSEG TO
ZTB_BM_RPC_SIR-RPSEG .
MOVE ZVI_BM_RPC_SIR-RITEM TO
ZTB_BM_RPC_SIR-RITEM .
MOVE ZVI_BM_RPC_SIR-ROWNO TO
ZTB_BM_RPC_SIR-ROWNO .
MOVE ZVI_BM_RPC_SIR-HROW TO
ZTB_BM_RPC_SIR-HROW .
MOVE ZVI_BM_RPC_SIR-MANDT TO
ZTB_BM_RPC_SIR-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_RPC_SIR'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_RPC_SIR TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_RPC_SIR'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_BM_RPC_SIRC.................................*
FORM GET_DATA_ZVI_BM_RPC_SIRC.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_RPC_SIRC WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_BM_RPC_SIRC .
ZVI_BM_RPC_SIRC-MANDT =
ZTB_BM_RPC_SIRC-MANDT .
ZVI_BM_RPC_SIRC-REPID =
ZTB_BM_RPC_SIRC-REPID .
ZVI_BM_RPC_SIRC-RPSEG =
ZTB_BM_RPC_SIRC-RPSEG .
ZVI_BM_RPC_SIRC-RITEM =
ZTB_BM_RPC_SIRC-RITEM .
ZVI_BM_RPC_SIRC-ROWNO =
ZTB_BM_RPC_SIRC-ROWNO .
ZVI_BM_RPC_SIRC-CONDID =
ZTB_BM_RPC_SIRC-CONDID .
ZVI_BM_RPC_SIRC-RTABLE =
ZTB_BM_RPC_SIRC-RTABLE .
ZVI_BM_RPC_SIRC-RFIELD =
ZTB_BM_RPC_SIRC-RFIELD .
ZVI_BM_RPC_SIRC-RANGID =
ZTB_BM_RPC_SIRC-RANGID .
ZVI_BM_RPC_SIRC-RSIGN =
ZTB_BM_RPC_SIRC-RSIGN .
ZVI_BM_RPC_SIRC-ROPTI =
ZTB_BM_RPC_SIRC-ROPTI .
ZVI_BM_RPC_SIRC-RLOW =
ZTB_BM_RPC_SIRC-RLOW .
ZVI_BM_RPC_SIRC-RHIGH =
ZTB_BM_RPC_SIRC-RHIGH .
<VIM_TOTAL_STRUC> = ZVI_BM_RPC_SIRC.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_BM_RPC_SIRC .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_BM_RPC_SIRC.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_BM_RPC_SIRC-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_RPC_SIRC WHERE
  REPID = ZVI_BM_RPC_SIRC-REPID AND
  RPSEG = ZVI_BM_RPC_SIRC-RPSEG AND
  RITEM = ZVI_BM_RPC_SIRC-RITEM AND
  ROWNO = ZVI_BM_RPC_SIRC-ROWNO AND
  CONDID = ZVI_BM_RPC_SIRC-CONDID AND
  RTABLE = ZVI_BM_RPC_SIRC-RTABLE AND
  RFIELD = ZVI_BM_RPC_SIRC-RFIELD AND
  RANGID = ZVI_BM_RPC_SIRC-RANGID .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_RPC_SIRC .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_RPC_SIRC WHERE
  REPID = ZVI_BM_RPC_SIRC-REPID AND
  RPSEG = ZVI_BM_RPC_SIRC-RPSEG AND
  RITEM = ZVI_BM_RPC_SIRC-RITEM AND
  ROWNO = ZVI_BM_RPC_SIRC-ROWNO AND
  CONDID = ZVI_BM_RPC_SIRC-CONDID AND
  RTABLE = ZVI_BM_RPC_SIRC-RTABLE AND
  RFIELD = ZVI_BM_RPC_SIRC-RFIELD AND
  RANGID = ZVI_BM_RPC_SIRC-RANGID .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_RPC_SIRC.
    ENDIF.
ZTB_BM_RPC_SIRC-MANDT =
ZVI_BM_RPC_SIRC-MANDT .
ZTB_BM_RPC_SIRC-REPID =
ZVI_BM_RPC_SIRC-REPID .
ZTB_BM_RPC_SIRC-RPSEG =
ZVI_BM_RPC_SIRC-RPSEG .
ZTB_BM_RPC_SIRC-RITEM =
ZVI_BM_RPC_SIRC-RITEM .
ZTB_BM_RPC_SIRC-ROWNO =
ZVI_BM_RPC_SIRC-ROWNO .
ZTB_BM_RPC_SIRC-CONDID =
ZVI_BM_RPC_SIRC-CONDID .
ZTB_BM_RPC_SIRC-RTABLE =
ZVI_BM_RPC_SIRC-RTABLE .
ZTB_BM_RPC_SIRC-RFIELD =
ZVI_BM_RPC_SIRC-RFIELD .
ZTB_BM_RPC_SIRC-RANGID =
ZVI_BM_RPC_SIRC-RANGID .
ZTB_BM_RPC_SIRC-RSIGN =
ZVI_BM_RPC_SIRC-RSIGN .
ZTB_BM_RPC_SIRC-ROPTI =
ZVI_BM_RPC_SIRC-ROPTI .
ZTB_BM_RPC_SIRC-RLOW =
ZVI_BM_RPC_SIRC-RLOW .
ZTB_BM_RPC_SIRC-RHIGH =
ZVI_BM_RPC_SIRC-RHIGH .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_RPC_SIRC ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_RPC_SIRC .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_BM_RPC_SIRC-UPD_FLAG,
STATUS_ZVI_BM_RPC_SIRC-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_BM_RPC_SIRC.
  SELECT SINGLE * FROM ZTB_BM_RPC_SIRC WHERE
REPID = ZVI_BM_RPC_SIRC-REPID AND
RPSEG = ZVI_BM_RPC_SIRC-RPSEG AND
RITEM = ZVI_BM_RPC_SIRC-RITEM AND
ROWNO = ZVI_BM_RPC_SIRC-ROWNO AND
CONDID = ZVI_BM_RPC_SIRC-CONDID AND
RTABLE = ZVI_BM_RPC_SIRC-RTABLE AND
RFIELD = ZVI_BM_RPC_SIRC-RFIELD AND
RANGID = ZVI_BM_RPC_SIRC-RANGID .
ZVI_BM_RPC_SIRC-MANDT =
ZTB_BM_RPC_SIRC-MANDT .
ZVI_BM_RPC_SIRC-REPID =
ZTB_BM_RPC_SIRC-REPID .
ZVI_BM_RPC_SIRC-RPSEG =
ZTB_BM_RPC_SIRC-RPSEG .
ZVI_BM_RPC_SIRC-RITEM =
ZTB_BM_RPC_SIRC-RITEM .
ZVI_BM_RPC_SIRC-ROWNO =
ZTB_BM_RPC_SIRC-ROWNO .
ZVI_BM_RPC_SIRC-CONDID =
ZTB_BM_RPC_SIRC-CONDID .
ZVI_BM_RPC_SIRC-RTABLE =
ZTB_BM_RPC_SIRC-RTABLE .
ZVI_BM_RPC_SIRC-RFIELD =
ZTB_BM_RPC_SIRC-RFIELD .
ZVI_BM_RPC_SIRC-RANGID =
ZTB_BM_RPC_SIRC-RANGID .
ZVI_BM_RPC_SIRC-RSIGN =
ZTB_BM_RPC_SIRC-RSIGN .
ZVI_BM_RPC_SIRC-ROPTI =
ZTB_BM_RPC_SIRC-ROPTI .
ZVI_BM_RPC_SIRC-RLOW =
ZTB_BM_RPC_SIRC-RLOW .
ZVI_BM_RPC_SIRC-RHIGH =
ZTB_BM_RPC_SIRC-RHIGH .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_BM_RPC_SIRC USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_BM_RPC_SIRC-REPID TO
ZTB_BM_RPC_SIRC-REPID .
MOVE ZVI_BM_RPC_SIRC-RPSEG TO
ZTB_BM_RPC_SIRC-RPSEG .
MOVE ZVI_BM_RPC_SIRC-RITEM TO
ZTB_BM_RPC_SIRC-RITEM .
MOVE ZVI_BM_RPC_SIRC-ROWNO TO
ZTB_BM_RPC_SIRC-ROWNO .
MOVE ZVI_BM_RPC_SIRC-CONDID TO
ZTB_BM_RPC_SIRC-CONDID .
MOVE ZVI_BM_RPC_SIRC-RTABLE TO
ZTB_BM_RPC_SIRC-RTABLE .
MOVE ZVI_BM_RPC_SIRC-RFIELD TO
ZTB_BM_RPC_SIRC-RFIELD .
MOVE ZVI_BM_RPC_SIRC-RANGID TO
ZTB_BM_RPC_SIRC-RANGID .
MOVE ZVI_BM_RPC_SIRC-MANDT TO
ZTB_BM_RPC_SIRC-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_RPC_SIRC'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_RPC_SIRC TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_RPC_SIRC'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_BM_RPC_SIRT.................................*
FORM GET_DATA_ZVI_BM_RPC_SIRT.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_RPC_SIRT WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_BM_RPC_SIRT .
ZVI_BM_RPC_SIRT-MANDT =
ZTB_BM_RPC_SIRT-MANDT .
ZVI_BM_RPC_SIRT-REPID =
ZTB_BM_RPC_SIRT-REPID .
ZVI_BM_RPC_SIRT-RPSEG =
ZTB_BM_RPC_SIRT-RPSEG .
ZVI_BM_RPC_SIRT-RITEM =
ZTB_BM_RPC_SIRT-RITEM .
ZVI_BM_RPC_SIRT-ROWNO =
ZTB_BM_RPC_SIRT-ROWNO .
ZVI_BM_RPC_SIRT-HROW =
ZTB_BM_RPC_SIRT-HROW .
ZVI_BM_RPC_SIRT-LANGU =
ZTB_BM_RPC_SIRT-LANGU .
ZVI_BM_RPC_SIRT-COL01 =
ZTB_BM_RPC_SIRT-COL01 .
ZVI_BM_RPC_SIRT-COL02 =
ZTB_BM_RPC_SIRT-COL02 .
ZVI_BM_RPC_SIRT-COL03 =
ZTB_BM_RPC_SIRT-COL03 .
ZVI_BM_RPC_SIRT-COL04 =
ZTB_BM_RPC_SIRT-COL04 .
ZVI_BM_RPC_SIRT-COL05 =
ZTB_BM_RPC_SIRT-COL05 .
ZVI_BM_RPC_SIRT-COL06 =
ZTB_BM_RPC_SIRT-COL06 .
ZVI_BM_RPC_SIRT-COL07 =
ZTB_BM_RPC_SIRT-COL07 .
ZVI_BM_RPC_SIRT-COL08 =
ZTB_BM_RPC_SIRT-COL08 .
ZVI_BM_RPC_SIRT-COL09 =
ZTB_BM_RPC_SIRT-COL09 .
ZVI_BM_RPC_SIRT-COL10 =
ZTB_BM_RPC_SIRT-COL10 .
ZVI_BM_RPC_SIRT-COL11 =
ZTB_BM_RPC_SIRT-COL11 .
ZVI_BM_RPC_SIRT-COL12 =
ZTB_BM_RPC_SIRT-COL12 .
ZVI_BM_RPC_SIRT-COL13 =
ZTB_BM_RPC_SIRT-COL13 .
ZVI_BM_RPC_SIRT-COL14 =
ZTB_BM_RPC_SIRT-COL14 .
ZVI_BM_RPC_SIRT-COL15 =
ZTB_BM_RPC_SIRT-COL15 .
ZVI_BM_RPC_SIRT-COL16 =
ZTB_BM_RPC_SIRT-COL16 .
ZVI_BM_RPC_SIRT-COL17 =
ZTB_BM_RPC_SIRT-COL17 .
ZVI_BM_RPC_SIRT-COL18 =
ZTB_BM_RPC_SIRT-COL18 .
ZVI_BM_RPC_SIRT-COL19 =
ZTB_BM_RPC_SIRT-COL19 .
ZVI_BM_RPC_SIRT-COL20 =
ZTB_BM_RPC_SIRT-COL20 .
ZVI_BM_RPC_SIRT-COL21 =
ZTB_BM_RPC_SIRT-COL21 .
ZVI_BM_RPC_SIRT-COL22 =
ZTB_BM_RPC_SIRT-COL22 .
ZVI_BM_RPC_SIRT-COL23 =
ZTB_BM_RPC_SIRT-COL23 .
ZVI_BM_RPC_SIRT-COL24 =
ZTB_BM_RPC_SIRT-COL24 .
ZVI_BM_RPC_SIRT-COL25 =
ZTB_BM_RPC_SIRT-COL25 .
ZVI_BM_RPC_SIRT-COL26 =
ZTB_BM_RPC_SIRT-COL26 .
ZVI_BM_RPC_SIRT-COL27 =
ZTB_BM_RPC_SIRT-COL27 .
ZVI_BM_RPC_SIRT-COL28 =
ZTB_BM_RPC_SIRT-COL28 .
ZVI_BM_RPC_SIRT-COL29 =
ZTB_BM_RPC_SIRT-COL29 .
ZVI_BM_RPC_SIRT-COL30 =
ZTB_BM_RPC_SIRT-COL30 .
ZVI_BM_RPC_SIRT-TEX01 =
ZTB_BM_RPC_SIRT-TEX01 .
ZVI_BM_RPC_SIRT-TEX02 =
ZTB_BM_RPC_SIRT-TEX02 .
ZVI_BM_RPC_SIRT-TEX03 =
ZTB_BM_RPC_SIRT-TEX03 .
ZVI_BM_RPC_SIRT-TEX04 =
ZTB_BM_RPC_SIRT-TEX04 .
ZVI_BM_RPC_SIRT-TEX05 =
ZTB_BM_RPC_SIRT-TEX05 .
<VIM_TOTAL_STRUC> = ZVI_BM_RPC_SIRT.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_BM_RPC_SIRT .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_BM_RPC_SIRT.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_BM_RPC_SIRT-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_RPC_SIRT WHERE
  REPID = ZVI_BM_RPC_SIRT-REPID AND
  RPSEG = ZVI_BM_RPC_SIRT-RPSEG AND
  RITEM = ZVI_BM_RPC_SIRT-RITEM AND
  ROWNO = ZVI_BM_RPC_SIRT-ROWNO AND
  HROW = ZVI_BM_RPC_SIRT-HROW AND
  LANGU = ZVI_BM_RPC_SIRT-LANGU .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_RPC_SIRT .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_RPC_SIRT WHERE
  REPID = ZVI_BM_RPC_SIRT-REPID AND
  RPSEG = ZVI_BM_RPC_SIRT-RPSEG AND
  RITEM = ZVI_BM_RPC_SIRT-RITEM AND
  ROWNO = ZVI_BM_RPC_SIRT-ROWNO AND
  HROW = ZVI_BM_RPC_SIRT-HROW AND
  LANGU = ZVI_BM_RPC_SIRT-LANGU .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_RPC_SIRT.
    ENDIF.
ZTB_BM_RPC_SIRT-MANDT =
ZVI_BM_RPC_SIRT-MANDT .
ZTB_BM_RPC_SIRT-REPID =
ZVI_BM_RPC_SIRT-REPID .
ZTB_BM_RPC_SIRT-RPSEG =
ZVI_BM_RPC_SIRT-RPSEG .
ZTB_BM_RPC_SIRT-RITEM =
ZVI_BM_RPC_SIRT-RITEM .
ZTB_BM_RPC_SIRT-ROWNO =
ZVI_BM_RPC_SIRT-ROWNO .
ZTB_BM_RPC_SIRT-HROW =
ZVI_BM_RPC_SIRT-HROW .
ZTB_BM_RPC_SIRT-LANGU =
ZVI_BM_RPC_SIRT-LANGU .
ZTB_BM_RPC_SIRT-COL01 =
ZVI_BM_RPC_SIRT-COL01 .
ZTB_BM_RPC_SIRT-COL02 =
ZVI_BM_RPC_SIRT-COL02 .
ZTB_BM_RPC_SIRT-COL03 =
ZVI_BM_RPC_SIRT-COL03 .
ZTB_BM_RPC_SIRT-COL04 =
ZVI_BM_RPC_SIRT-COL04 .
ZTB_BM_RPC_SIRT-COL05 =
ZVI_BM_RPC_SIRT-COL05 .
ZTB_BM_RPC_SIRT-COL06 =
ZVI_BM_RPC_SIRT-COL06 .
ZTB_BM_RPC_SIRT-COL07 =
ZVI_BM_RPC_SIRT-COL07 .
ZTB_BM_RPC_SIRT-COL08 =
ZVI_BM_RPC_SIRT-COL08 .
ZTB_BM_RPC_SIRT-COL09 =
ZVI_BM_RPC_SIRT-COL09 .
ZTB_BM_RPC_SIRT-COL10 =
ZVI_BM_RPC_SIRT-COL10 .
ZTB_BM_RPC_SIRT-COL11 =
ZVI_BM_RPC_SIRT-COL11 .
ZTB_BM_RPC_SIRT-COL12 =
ZVI_BM_RPC_SIRT-COL12 .
ZTB_BM_RPC_SIRT-COL13 =
ZVI_BM_RPC_SIRT-COL13 .
ZTB_BM_RPC_SIRT-COL14 =
ZVI_BM_RPC_SIRT-COL14 .
ZTB_BM_RPC_SIRT-COL15 =
ZVI_BM_RPC_SIRT-COL15 .
ZTB_BM_RPC_SIRT-COL16 =
ZVI_BM_RPC_SIRT-COL16 .
ZTB_BM_RPC_SIRT-COL17 =
ZVI_BM_RPC_SIRT-COL17 .
ZTB_BM_RPC_SIRT-COL18 =
ZVI_BM_RPC_SIRT-COL18 .
ZTB_BM_RPC_SIRT-COL19 =
ZVI_BM_RPC_SIRT-COL19 .
ZTB_BM_RPC_SIRT-COL20 =
ZVI_BM_RPC_SIRT-COL20 .
ZTB_BM_RPC_SIRT-COL21 =
ZVI_BM_RPC_SIRT-COL21 .
ZTB_BM_RPC_SIRT-COL22 =
ZVI_BM_RPC_SIRT-COL22 .
ZTB_BM_RPC_SIRT-COL23 =
ZVI_BM_RPC_SIRT-COL23 .
ZTB_BM_RPC_SIRT-COL24 =
ZVI_BM_RPC_SIRT-COL24 .
ZTB_BM_RPC_SIRT-COL25 =
ZVI_BM_RPC_SIRT-COL25 .
ZTB_BM_RPC_SIRT-COL26 =
ZVI_BM_RPC_SIRT-COL26 .
ZTB_BM_RPC_SIRT-COL27 =
ZVI_BM_RPC_SIRT-COL27 .
ZTB_BM_RPC_SIRT-COL28 =
ZVI_BM_RPC_SIRT-COL28 .
ZTB_BM_RPC_SIRT-COL29 =
ZVI_BM_RPC_SIRT-COL29 .
ZTB_BM_RPC_SIRT-COL30 =
ZVI_BM_RPC_SIRT-COL30 .
ZTB_BM_RPC_SIRT-TEX01 =
ZVI_BM_RPC_SIRT-TEX01 .
ZTB_BM_RPC_SIRT-TEX02 =
ZVI_BM_RPC_SIRT-TEX02 .
ZTB_BM_RPC_SIRT-TEX03 =
ZVI_BM_RPC_SIRT-TEX03 .
ZTB_BM_RPC_SIRT-TEX04 =
ZVI_BM_RPC_SIRT-TEX04 .
ZTB_BM_RPC_SIRT-TEX05 =
ZVI_BM_RPC_SIRT-TEX05 .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_RPC_SIRT ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_RPC_SIRT .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_BM_RPC_SIRT-UPD_FLAG,
STATUS_ZVI_BM_RPC_SIRT-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_BM_RPC_SIRT.
  SELECT SINGLE * FROM ZTB_BM_RPC_SIRT WHERE
REPID = ZVI_BM_RPC_SIRT-REPID AND
RPSEG = ZVI_BM_RPC_SIRT-RPSEG AND
RITEM = ZVI_BM_RPC_SIRT-RITEM AND
ROWNO = ZVI_BM_RPC_SIRT-ROWNO AND
HROW = ZVI_BM_RPC_SIRT-HROW AND
LANGU = ZVI_BM_RPC_SIRT-LANGU .
ZVI_BM_RPC_SIRT-MANDT =
ZTB_BM_RPC_SIRT-MANDT .
ZVI_BM_RPC_SIRT-REPID =
ZTB_BM_RPC_SIRT-REPID .
ZVI_BM_RPC_SIRT-RPSEG =
ZTB_BM_RPC_SIRT-RPSEG .
ZVI_BM_RPC_SIRT-RITEM =
ZTB_BM_RPC_SIRT-RITEM .
ZVI_BM_RPC_SIRT-ROWNO =
ZTB_BM_RPC_SIRT-ROWNO .
ZVI_BM_RPC_SIRT-HROW =
ZTB_BM_RPC_SIRT-HROW .
ZVI_BM_RPC_SIRT-LANGU =
ZTB_BM_RPC_SIRT-LANGU .
ZVI_BM_RPC_SIRT-COL01 =
ZTB_BM_RPC_SIRT-COL01 .
ZVI_BM_RPC_SIRT-COL02 =
ZTB_BM_RPC_SIRT-COL02 .
ZVI_BM_RPC_SIRT-COL03 =
ZTB_BM_RPC_SIRT-COL03 .
ZVI_BM_RPC_SIRT-COL04 =
ZTB_BM_RPC_SIRT-COL04 .
ZVI_BM_RPC_SIRT-COL05 =
ZTB_BM_RPC_SIRT-COL05 .
ZVI_BM_RPC_SIRT-COL06 =
ZTB_BM_RPC_SIRT-COL06 .
ZVI_BM_RPC_SIRT-COL07 =
ZTB_BM_RPC_SIRT-COL07 .
ZVI_BM_RPC_SIRT-COL08 =
ZTB_BM_RPC_SIRT-COL08 .
ZVI_BM_RPC_SIRT-COL09 =
ZTB_BM_RPC_SIRT-COL09 .
ZVI_BM_RPC_SIRT-COL10 =
ZTB_BM_RPC_SIRT-COL10 .
ZVI_BM_RPC_SIRT-COL11 =
ZTB_BM_RPC_SIRT-COL11 .
ZVI_BM_RPC_SIRT-COL12 =
ZTB_BM_RPC_SIRT-COL12 .
ZVI_BM_RPC_SIRT-COL13 =
ZTB_BM_RPC_SIRT-COL13 .
ZVI_BM_RPC_SIRT-COL14 =
ZTB_BM_RPC_SIRT-COL14 .
ZVI_BM_RPC_SIRT-COL15 =
ZTB_BM_RPC_SIRT-COL15 .
ZVI_BM_RPC_SIRT-COL16 =
ZTB_BM_RPC_SIRT-COL16 .
ZVI_BM_RPC_SIRT-COL17 =
ZTB_BM_RPC_SIRT-COL17 .
ZVI_BM_RPC_SIRT-COL18 =
ZTB_BM_RPC_SIRT-COL18 .
ZVI_BM_RPC_SIRT-COL19 =
ZTB_BM_RPC_SIRT-COL19 .
ZVI_BM_RPC_SIRT-COL20 =
ZTB_BM_RPC_SIRT-COL20 .
ZVI_BM_RPC_SIRT-COL21 =
ZTB_BM_RPC_SIRT-COL21 .
ZVI_BM_RPC_SIRT-COL22 =
ZTB_BM_RPC_SIRT-COL22 .
ZVI_BM_RPC_SIRT-COL23 =
ZTB_BM_RPC_SIRT-COL23 .
ZVI_BM_RPC_SIRT-COL24 =
ZTB_BM_RPC_SIRT-COL24 .
ZVI_BM_RPC_SIRT-COL25 =
ZTB_BM_RPC_SIRT-COL25 .
ZVI_BM_RPC_SIRT-COL26 =
ZTB_BM_RPC_SIRT-COL26 .
ZVI_BM_RPC_SIRT-COL27 =
ZTB_BM_RPC_SIRT-COL27 .
ZVI_BM_RPC_SIRT-COL28 =
ZTB_BM_RPC_SIRT-COL28 .
ZVI_BM_RPC_SIRT-COL29 =
ZTB_BM_RPC_SIRT-COL29 .
ZVI_BM_RPC_SIRT-COL30 =
ZTB_BM_RPC_SIRT-COL30 .
ZVI_BM_RPC_SIRT-TEX01 =
ZTB_BM_RPC_SIRT-TEX01 .
ZVI_BM_RPC_SIRT-TEX02 =
ZTB_BM_RPC_SIRT-TEX02 .
ZVI_BM_RPC_SIRT-TEX03 =
ZTB_BM_RPC_SIRT-TEX03 .
ZVI_BM_RPC_SIRT-TEX04 =
ZTB_BM_RPC_SIRT-TEX04 .
ZVI_BM_RPC_SIRT-TEX05 =
ZTB_BM_RPC_SIRT-TEX05 .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_BM_RPC_SIRT USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_BM_RPC_SIRT-REPID TO
ZTB_BM_RPC_SIRT-REPID .
MOVE ZVI_BM_RPC_SIRT-RPSEG TO
ZTB_BM_RPC_SIRT-RPSEG .
MOVE ZVI_BM_RPC_SIRT-RITEM TO
ZTB_BM_RPC_SIRT-RITEM .
MOVE ZVI_BM_RPC_SIRT-ROWNO TO
ZTB_BM_RPC_SIRT-ROWNO .
MOVE ZVI_BM_RPC_SIRT-HROW TO
ZTB_BM_RPC_SIRT-HROW .
MOVE ZVI_BM_RPC_SIRT-LANGU TO
ZTB_BM_RPC_SIRT-LANGU .
MOVE ZVI_BM_RPC_SIRT-MANDT TO
ZTB_BM_RPC_SIRT-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_RPC_SIRT'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_RPC_SIRT TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_RPC_SIRT'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_BM_RPC_W....................................*
FORM GET_DATA_ZVI_BM_RPC_W.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_RPC_W WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_BM_RPC_W .
ZVI_BM_RPC_W-MANDT =
ZTB_BM_RPC_W-MANDT .
ZVI_BM_RPC_W-REPID =
ZTB_BM_RPC_W-REPID .
ZVI_BM_RPC_W-RITEM =
ZTB_BM_RPC_W-RITEM .
ZVI_BM_RPC_W-RIDES =
ZTB_BM_RPC_W-RIDES .
<VIM_TOTAL_STRUC> = ZVI_BM_RPC_W.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_BM_RPC_W .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_BM_RPC_W.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_BM_RPC_W-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_RPC_W WHERE
  REPID = ZVI_BM_RPC_W-REPID AND
  RITEM = ZVI_BM_RPC_W-RITEM .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_RPC_W .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_RPC_W WHERE
  REPID = ZVI_BM_RPC_W-REPID AND
  RITEM = ZVI_BM_RPC_W-RITEM .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_RPC_W.
    ENDIF.
ZTB_BM_RPC_W-MANDT =
ZVI_BM_RPC_W-MANDT .
ZTB_BM_RPC_W-REPID =
ZVI_BM_RPC_W-REPID .
ZTB_BM_RPC_W-RITEM =
ZVI_BM_RPC_W-RITEM .
ZTB_BM_RPC_W-RIDES =
ZVI_BM_RPC_W-RIDES .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_RPC_W ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_RPC_W .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_BM_RPC_W-UPD_FLAG,
STATUS_ZVI_BM_RPC_W-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_BM_RPC_W.
  SELECT SINGLE * FROM ZTB_BM_RPC_W WHERE
REPID = ZVI_BM_RPC_W-REPID AND
RITEM = ZVI_BM_RPC_W-RITEM .
ZVI_BM_RPC_W-MANDT =
ZTB_BM_RPC_W-MANDT .
ZVI_BM_RPC_W-REPID =
ZTB_BM_RPC_W-REPID .
ZVI_BM_RPC_W-RITEM =
ZTB_BM_RPC_W-RITEM .
ZVI_BM_RPC_W-RIDES =
ZTB_BM_RPC_W-RIDES .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_BM_RPC_W USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_BM_RPC_W-REPID TO
ZTB_BM_RPC_W-REPID .
MOVE ZVI_BM_RPC_W-RITEM TO
ZTB_BM_RPC_W-RITEM .
MOVE ZVI_BM_RPC_W-MANDT TO
ZTB_BM_RPC_W-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_RPC_W'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_RPC_W TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_RPC_W'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZVI_BM_RPC_WC...................................*
FORM GET_DATA_ZVI_BM_RPC_WC.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTB_BM_RPC_WC WHERE
(VIM_WHERETAB) .
    CLEAR ZVI_BM_RPC_WC .
ZVI_BM_RPC_WC-MANDT =
ZTB_BM_RPC_WC-MANDT .
ZVI_BM_RPC_WC-REPID =
ZTB_BM_RPC_WC-REPID .
ZVI_BM_RPC_WC-RITEM =
ZTB_BM_RPC_WC-RITEM .
ZVI_BM_RPC_WC-BUKRS =
ZTB_BM_RPC_WC-BUKRS .
ZVI_BM_RPC_WC-RIDES =
ZTB_BM_RPC_WC-RIDES .
<VIM_TOTAL_STRUC> = ZVI_BM_RPC_WC.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZVI_BM_RPC_WC .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZVI_BM_RPC_WC.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZVI_BM_RPC_WC-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_RPC_WC WHERE
  REPID = ZVI_BM_RPC_WC-REPID AND
  RITEM = ZVI_BM_RPC_WC-RITEM AND
  BUKRS = ZVI_BM_RPC_WC-BUKRS .
    IF SY-SUBRC = 0.
    DELETE ZTB_BM_RPC_WC .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTB_BM_RPC_WC WHERE
  REPID = ZVI_BM_RPC_WC-REPID AND
  RITEM = ZVI_BM_RPC_WC-RITEM AND
  BUKRS = ZVI_BM_RPC_WC-BUKRS .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTB_BM_RPC_WC.
    ENDIF.
ZTB_BM_RPC_WC-MANDT =
ZVI_BM_RPC_WC-MANDT .
ZTB_BM_RPC_WC-REPID =
ZVI_BM_RPC_WC-REPID .
ZTB_BM_RPC_WC-RITEM =
ZVI_BM_RPC_WC-RITEM .
ZTB_BM_RPC_WC-BUKRS =
ZVI_BM_RPC_WC-BUKRS .
ZTB_BM_RPC_WC-RIDES =
ZVI_BM_RPC_WC-RIDES .
    IF SY-SUBRC = 0.
    UPDATE ZTB_BM_RPC_WC ##WARN_OK.
    ELSE.
    INSERT ZTB_BM_RPC_WC .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZVI_BM_RPC_WC-UPD_FLAG,
STATUS_ZVI_BM_RPC_WC-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZVI_BM_RPC_WC.
  SELECT SINGLE * FROM ZTB_BM_RPC_WC WHERE
REPID = ZVI_BM_RPC_WC-REPID AND
RITEM = ZVI_BM_RPC_WC-RITEM AND
BUKRS = ZVI_BM_RPC_WC-BUKRS .
ZVI_BM_RPC_WC-MANDT =
ZTB_BM_RPC_WC-MANDT .
ZVI_BM_RPC_WC-REPID =
ZTB_BM_RPC_WC-REPID .
ZVI_BM_RPC_WC-RITEM =
ZTB_BM_RPC_WC-RITEM .
ZVI_BM_RPC_WC-BUKRS =
ZTB_BM_RPC_WC-BUKRS .
ZVI_BM_RPC_WC-RIDES =
ZTB_BM_RPC_WC-RIDES .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZVI_BM_RPC_WC USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZVI_BM_RPC_WC-REPID TO
ZTB_BM_RPC_WC-REPID .
MOVE ZVI_BM_RPC_WC-RITEM TO
ZTB_BM_RPC_WC-RITEM .
MOVE ZVI_BM_RPC_WC-BUKRS TO
ZTB_BM_RPC_WC-BUKRS .
MOVE ZVI_BM_RPC_WC-MANDT TO
ZTB_BM_RPC_WC-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTB_BM_RPC_WC'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTB_BM_RPC_WC TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTB_BM_RPC_WC'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*

* base table related FORM-routines.............
INCLUDE LSVIMFTX .
