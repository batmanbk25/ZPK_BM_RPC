FUNCTION ZFM_BM_RPC_GENERATE.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     REFERENCE(I_REPID) TYPE  ZDD_BM_RPC_REPID
*"     REFERENCE(I_BUKRS) TYPE  BUKRS OPTIONAL
*"     REFERENCE(I_BUTXT) TYPE  BUTXT OPTIONAL
*"     REFERENCE(I_BEMON) TYPE  RSCALMONTH OPTIONAL
*"     REFERENCE(I_ENMON) TYPE  RSCALMONTH OPTIONAL
*"     REFERENCE(I_LANGU) TYPE  LANGU DEFAULT 'E'
*"     REFERENCE(I_NO_SHOW_ERR) TYPE  XMARK DEFAULT 'X'
*"  CHANGING
*"     REFERENCE(CS_RPC_CONTEXT) TYPE  ZST1_BM_RPC_R
*"----------------------------------------------------------------------

  DATA:
    LT_ITM_TAB   TYPE TABLE OF ZTB_BM_RPC_D,
    LS_ITM_TAB   TYPE ZTB_BM_RPC_D,
    LW_CUR_REC   TYPE NUMC10,
    LW_ALL_ITM   TYPE NUMC10,
    LW_ALL_REC   TYPE NUMC10,
    LS_DATA_SEG  TYPE ZST1_BM_RPC_S,
    LS_DATA_SITM TYPE ZST1_BM_RPC_SI,
    LS_RPC_R     TYPE ZST_BM_RPC_R.
  FIELD-SYMBOLS:
    <LF_COMP>    TYPE ANY,
    <LFT_RPCDAT> TYPE ZTT_BM_RPC_D,
    <LF_COLVAL>  TYPE ANY.

* Core init
  CALL FUNCTION 'ZFM_BM_RPC_INIT'
    EXPORTING
      I_REPID = I_REPID
      I_BUKRS = I_BUKRS
      I_BUTXT = I_BUTXT
      I_BEMON = I_BEMON
      I_ENMON = I_ENMON
      I_LANGU = I_LANGU
    IMPORTING
      E_RPC_R = GS_RPC_R.

  GW_NO_SHOW_ERR = I_NO_SHOW_ERR.

* Report init
  IF GS_RPC_R-INITFM IS NOT INITIAL.
    CALL FUNCTION GS_RPC_R-INITFM "'ZFM_RPCF_HPA_0000'
      EXPORTING
        IS_RPC_R = GS_RPC_R.
  ENDIF.

  LW_ALL_REC = LINES( GS_RPC_R-SEGMENTS ).

* Init report context data
  MOVE-CORRESPONDING GS_RPC_R TO LS_RPC_R.
  MOVE-CORRESPONDING LS_RPC_R TO CS_RPC_CONTEXT.
  CS_RPC_CONTEXT-BUTXT = I_BUTXT.
  CS_RPC_CONTEXT-LANGU = I_LANGU.
  CLEAR: CS_RPC_CONTEXT-SEGMENTS.

  LOOP AT GS_RPC_R-SEGMENTS INTO DATA(LS_RPC_S).
    CLEAR: LS_DATA_SEG.
    LS_DATA_SEG-RPSEG = LS_RPC_S-RPSEG.
    LS_DATA_SEG-RPSNM = LS_RPC_S-RPSNM.

    LW_CUR_REC = SY-TABIX.
    CALL FUNCTION 'ZFM_SHOW_PROGRESS_INDICATOR'
      EXPORTING
        I_CURRENT_RECORD = LW_CUR_REC
        I_TOTAL_RECORD   = LW_ALL_REC.

    CLEAR: LT_ITM_TAB.
    LW_ALL_ITM = LINES( LS_RPC_S-ITEMS ).
    LOOP AT LS_RPC_S-ITEMS INTO DATA(LS_RPC_SI).
      CLEAR: LS_DATA_SITM.
      IF LS_RPC_SI-ITMTY = GC_ITEMTYPE_TEXT.
        LS_RPC_SI-TEMPL = '010'.
      ENDIF.

*     Set template to show
      PERFORM SEGMENT_ITEM_SET_TEMPL_SHOW
        USING LS_RPC_SI-TEMPL
        CHANGING LS_DATA_SITM.

      LW_CUR_REC = SY-TABIX.
      CALL FUNCTION 'ZFM_SHOW_PROGRESS_INDICATOR'
        EXPORTING
          I_CURRENT_RECORD = LW_CUR_REC
          I_TOTAL_RECORD   = LW_ALL_ITM.
      CASE LS_RPC_SI-ITMTY.
        WHEN GC_ITEMTYPE_LINE.
          PERFORM FORM_OUT_GEN_LINE
            USING GS_RPC_R
                  LS_RPC_S
                  LS_RPC_SI
            CHANGING LS_DATA_SITM.

        WHEN GC_ITEMTYPE_TABLE.
          PERFORM FORM_OUT_GEN_TAB
            USING GS_RPC_R
                  LS_RPC_S
                  LS_RPC_SI
            CHANGING LS_DATA_SITM.
        WHEN GC_ITEMTYPE_TEXT.
          PERFORM FORM_OUT_GEN_TEXT
            USING GS_RPC_R
                  LS_RPC_S
                  LS_RPC_SI
            CHANGING LS_DATA_SITM.
        WHEN GC_ITEMTYPE_FSV.
          PERFORM FORM_OUT_GEN_FSV
            USING GS_RPC_R
                  LS_RPC_S
                  LS_RPC_SI
            CHANGING LS_DATA_SITM.
        WHEN GC_ITEMTYPE_AHS.
        WHEN OTHERS.
      ENDCASE.

      APPEND LS_DATA_SITM TO LS_DATA_SEG-SEGITEM.
    ENDLOOP.

    APPEND LS_DATA_SEG TO CS_RPC_CONTEXT-SEGMENTS.
  ENDLOOP.

ENDFUNCTION.
