FUNCTION ZFM_BM_RPC_INIT.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     REFERENCE(I_REPID) TYPE  ZDD_BM_RPC_REPID
*"     REFERENCE(I_BUKRS) TYPE  BUKRS
*"     REFERENCE(I_BUTXT) TYPE  BUTXT OPTIONAL
*"     REFERENCE(I_BEMON) TYPE  RSCALMONTH
*"     VALUE(I_ENMON) TYPE  RSCALMONTH OPTIONAL
*"     REFERENCE(I_LANGU) TYPE  LANGU DEFAULT 'E'
*"     REFERENCE(I_CURMONTH) TYPE  XMARK OPTIONAL
*"  EXPORTING
*"     REFERENCE(E_RPC_R) TYPE  ZST0_BM_RPC_R
*"----------------------------------------------------------------------
  DATA:
    LS0_RPC_S    TYPE ZST0_BM_RPC_S,
    LS0_RPC_SI   TYPE ZST0_BM_RPC_SI,
    LS0_RPC_LF   TYPE ZST0_BM_RPC_LF,
    LS0_RPC_SIR  TYPE ZST0_BM_RPC_SIR,
    LS0_RPC_SIC  TYPE ZST0_BM_RPC_SIC,
    LS0_RPC_COND TYPE ZST0_BM_RPC_SICOND,
    LS0_RPC_F    TYPE ZST0_BM_RPC_F,
    LS0_RPC_D    TYPE ZST0_BM_RPC_D.

  E_RPC_R = GS_RPC_R.

  IF I_ENMON IS INITIAL.
    I_ENMON = I_BEMON.
  ENDIF.

  CLEAR: GS_RPC_R.

* Get report
  SELECT SINGLE *
    FROM ZTB_BM_RPC_R
    INTO @DATA(LS_RPC_R)
   WHERE REPID = @I_REPID.

* Get segment
  SELECT *
    FROM ZTB_BM_RPC_S
    INTO TABLE @DATA(LT_RPC_S)
   WHERE REPID = @I_REPID.
  SORT LT_RPC_S BY REPID RPSEG.

* Get templates
  SELECT *
    FROM ZTB_BM_RPC_T
    INTO TABLE GT_RPC_T.
  SORT GT_RPC_T BY TEMPL.

* Get key figures
  SELECT  D~TABNAME
          D~FIELDNAME
          KFFLAG
          CHFLAG
          D~CHECKTABLE
          CHECKFIELD
          SCRTEXT_L
    FROM ZTB_BM_RPC_DIM AS D INNER JOIN DD03VT AS T
      ON D~TABNAME = T~TABNAME AND D~FIELDNAME = T~FIELDNAME
     AND T~DDLANGUAGE = SY-LANGU
    INTO TABLE GT_RPC_KEYF
   WHERE KFFLAG = 'X'.
  SORT GT_RPC_KEYF BY TABNAME FIELDNAME.

* Get characteristics
  SELECT  D~TABNAME
          D~FIELDNAME
          KFFLAG
          CHFLAG
          D~CHECKTABLE
          CHECKFIELD
          T~SCRTEXT_L
          T~ROLLNAME
          C~CONVEXIT
    FROM ZTB_BM_RPC_DIM AS D INNER JOIN DD03VT AS T
      ON D~TABNAME = T~TABNAME AND D~FIELDNAME = T~FIELDNAME
     AND T~DDLANGUAGE = SY-LANGU
   INNER JOIN DD04L AS C ON T~ROLLNAME = C~ROLLNAME
    INTO TABLE GT_RPC_CHAR
   WHERE CHFLAG = 'X'.
  SORT GT_RPC_CHAR BY TABNAME FIELDNAME.

* Get segment item
  SELECT *
    FROM ZTB_BM_RPC_SI
    INTO TABLE @DATA(LT_RPC_SI)
   WHERE REPID = @I_REPID.
  SORT LT_RPC_SI BY REPID RPSEG RITEM.

* Get line figures
  SELECT *
    FROM ZTB_BM_RPC_LF
    INTO TABLE @DATA(LT_RPC_LF)
   WHERE REPID = @I_REPID.
  SORT LT_RPC_LF BY REPID RPSEG RITEM FNAME.

* Get rows
  SELECT *
    FROM ZTB_BM_RPC_SIR
    INTO TABLE @DATA(LT_RPC_SIR)
   WHERE REPID = @I_REPID.
  SORT LT_RPC_SIR BY REPID RPSEG RITEM HROW DESCENDING ROWNO.

* Get rows text
  SELECT *
    FROM ZTB_BM_RPC_SIRT
    INTO TABLE @DATA(LT_RPC_SIRT)
   WHERE REPID = @I_REPID.
  SORT LT_RPC_SIRT BY REPID RPSEG RITEM ROWNO HROW LANGU.

* Get cols
  SELECT *
    FROM ZTB_BM_RPC_SIC
    INTO TABLE @DATA(LT_RPC_SIC)
   WHERE REPID = @I_REPID.
  SORT LT_RPC_SIC BY REPID RPSEG RITEM COLNO.

* Get row conditions
  SELECT *
    FROM ZTB_BM_RPC_SIRC
    INTO TABLE @DATA(LT_RPC_SIRC)
   WHERE REPID = @I_REPID.
  SORT LT_RPC_SIRC BY REPID RPSEG RITEM ROWNO CONDID RTABLE RFIELD RANGID.

* Get cols
  SELECT *
    FROM ZTB_BM_RPC_SICC
    INTO TABLE @DATA(LT_RPC_SICC)
   WHERE REPID = @I_REPID.
  SORT LT_RPC_SICC BY REPID RPSEG RITEM COLNO CONDID RTABLE RFIELD RANGID.

  IF I_CURMONTH IS INITIAL.
*   Get form structure
    SELECT *
      FROM ZTB_BM_RPC_F
      INTO TABLE @DATA(LT_RPC_F)
     WHERE REPID = @I_REPID
       AND BUKRS = @I_BUKRS
       AND EFMON <= @I_ENMON.
    SORT LT_RPC_F BY REPID RPSEG RITEM EFMON DESCENDING.
    DELETE ADJACENT DUPLICATES FROM LT_RPC_F COMPARING REPID RPSEG RITEM.

*   Get form data
    SELECT *
      FROM ZTB_BM_RPC_D
      INTO TABLE @DATA(LT_RPC_D)
     WHERE REPID = @I_REPID
       AND BUKRS = @I_BUKRS
       AND EFMON <= @I_ENMON.
    SORT LT_RPC_D BY REPID RPSEG RITEM LANGU ROWPOS EFMON DESCENDING.
    DELETE ADJACENT DUPLICATES FROM LT_RPC_D
      COMPARING REPID RPSEG RITEM LANGU ROWPOS.
    DELETE LT_RPC_D WHERE LANGU <> I_LANGU AND LANGU <> SPACE.
  ELSE.
*   Get form structure
    SELECT *
      FROM ZTB_BM_RPC_F
      INTO TABLE LT_RPC_F
     WHERE REPID = I_REPID
       AND BUKRS = I_BUKRS
       AND EFMON BETWEEN I_BEMON AND I_ENMON.
    SORT LT_RPC_F BY REPID RPSEG RITEM EFMON DESCENDING.
    DELETE ADJACENT DUPLICATES FROM LT_RPC_F COMPARING REPID RPSEG RITEM.

*   Get form data
    SELECT *
      FROM ZTB_BM_RPC_D
      INTO TABLE LT_RPC_D
     WHERE REPID = I_REPID
       AND BUKRS = I_BUKRS
       AND EFMON BETWEEN I_BEMON AND I_ENMON.
    SORT LT_RPC_D BY REPID RPSEG RITEM LANGU ROWPOS EFMON DESCENDING.
    DELETE ADJACENT DUPLICATES FROM LT_RPC_D
      COMPARING REPID RPSEG RITEM LANGU ROWPOS.
    DELETE LT_RPC_D WHERE LANGU <> I_LANGU AND LANGU <> SPACE.
  ENDIF.

  MOVE-CORRESPONDING LS_RPC_R TO GS_RPC_R.
  GS_RPC_R-REPID = I_REPID.
  GS_RPC_R-BUKRS = I_BUKRS.
  GS_RPC_R-BEMON = I_BEMON.
  GS_RPC_R-ENMON = I_ENMON.
  GS_RPC_R-MONTH = I_ENMON.
  GS_RPC_R-LANGU = I_LANGU.

* Process segments
  LOOP AT LT_RPC_S INTO DATA(LS_RPC_S).
    CLEAR: LS0_RPC_S.
    MOVE-CORRESPONDING LS_RPC_S TO LS0_RPC_S.

*   Process segment items
    READ TABLE LT_RPC_SI TRANSPORTING NO FIELDS
      WITH KEY REPID = GS_RPC_R-REPID
               RPSEG = LS0_RPC_S-RPSEG BINARY SEARCH.
    IF SY-SUBRC IS INITIAL.
      LOOP AT LT_RPC_SI INTO DATA(LS_RPC_SI) FROM SY-TABIX.
        IF LS_RPC_SI-RPSEG <> LS0_RPC_S-RPSEG.
          EXIT.
        ENDIF.
        CLEAR: LS0_RPC_SI.
        MOVE-CORRESPONDING LS_RPC_SI TO LS0_RPC_SI.

        READ TABLE GT_RPC_T INTO DATA(LS_RPC_T)
          WITH KEY TEMPL = LS_RPC_SI-TEMPL BINARY SEARCH.
        IF SY-SUBRC IS INITIAL.
          LS0_RPC_SI-NOCOL  = LS_RPC_T-NOCOL.
          LS0_RPC_SI-NOLEAD = LS_RPC_T-NOLEAD.
          LS0_RPC_SI-HROWS  = LS_RPC_T-HROWS.
        ENDIF.

*       Process line figures
        READ TABLE LT_RPC_LF TRANSPORTING NO FIELDS
          WITH KEY REPID = GS_RPC_R-REPID
                   RPSEG = LS_RPC_SI-RPSEG
                   RITEM = LS_RPC_SI-RITEM BINARY SEARCH.
        IF SY-SUBRC IS INITIAL.
          LOOP AT LT_RPC_LF INTO DATA(LS_RPC_LF) FROM SY-TABIX.
            IF LS_RPC_LF-RPSEG <> LS_RPC_SI-RPSEG
              OR LS_RPC_LF-RITEM <> LS_RPC_SI-RITEM.
              EXIT.
            ENDIF.
            CLEAR: LS0_RPC_LF.
            MOVE-CORRESPONDING LS_RPC_LF TO LS0_RPC_LF.
            APPEND LS0_RPC_LF TO LS0_RPC_SI-FIGURES.
          ENDLOOP.
        ENDIF.

*       Process rows
        READ TABLE LT_RPC_SIR TRANSPORTING NO FIELDS
          WITH KEY REPID = GS_RPC_R-REPID
                   RPSEG = LS_RPC_SI-RPSEG
                   RITEM = LS_RPC_SI-RITEM BINARY SEARCH.
        IF SY-SUBRC IS INITIAL.
          LOOP AT LT_RPC_SIR INTO DATA(LS_RPC_SIR) FROM SY-TABIX.
            IF LS_RPC_SIR-RPSEG <> LS_RPC_SI-RPSEG
              OR LS_RPC_SIR-RITEM <> LS_RPC_SI-RITEM.
              EXIT.
            ENDIF.
            CLEAR: LS0_RPC_SIR.
            MOVE-CORRESPONDING LS_RPC_SIR TO LS0_RPC_SIR.

            READ TABLE LT_RPC_SIRT INTO DATA(LS_RPC_SIRT)
              WITH KEY REPID = LS_RPC_SIR-REPID
                       RPSEG = LS_RPC_SIR-RPSEG
                       RITEM = LS_RPC_SIR-RITEM
                       ROWNO = LS_RPC_SIR-ROWNO
                       HROW  = LS_RPC_SIR-HROW
                       LANGU = 'E'.
            IF SY-SUBRC IS INITIAL.
              MOVE-CORRESPONDING LS_RPC_SIRT TO LS0_RPC_SIR.
            ENDIF.

            READ TABLE LT_RPC_SIRT INTO LS_RPC_SIRT
              WITH KEY REPID = LS_RPC_SIR-REPID
                       RPSEG = LS_RPC_SIR-RPSEG
                       RITEM = LS_RPC_SIR-RITEM
                       ROWNO = LS_RPC_SIR-ROWNO
                       HROW  = LS_RPC_SIR-HROW
                       LANGU = GC_LANGU_VN.
            IF SY-SUBRC IS INITIAL.
              MOVE-CORRESPONDING LS_RPC_SIRT TO LS0_RPC_SIR-VIDATA.
            ENDIF.

            APPEND LS0_RPC_SIR TO LS0_RPC_SI-ROWS.
          ENDLOOP.
        ENDIF.

*       Process columns
        READ TABLE LT_RPC_SIC TRANSPORTING NO FIELDS
          WITH KEY REPID = GS_RPC_R-REPID
                   RPSEG = LS_RPC_SI-RPSEG
                   RITEM = LS_RPC_SI-RITEM BINARY SEARCH.
        IF SY-SUBRC IS INITIAL.
          LOOP AT LT_RPC_SIC INTO DATA(LS_RPC_SIC) FROM SY-TABIX.
            IF LS_RPC_SIC-RPSEG <> LS_RPC_SI-RPSEG
              OR LS_RPC_SIC-RITEM <> LS_RPC_SI-RITEM.
              EXIT.
            ENDIF.
            CLEAR: LS0_RPC_SIC.
            MOVE-CORRESPONDING LS_RPC_SIC TO LS0_RPC_SIC.
            APPEND LS0_RPC_SIC TO LS0_RPC_SI-COLUMNS.
          ENDLOOP.
        ENDIF.

*       Process column conditions
        READ TABLE LT_RPC_SICC TRANSPORTING NO FIELDS
          WITH KEY REPID = GS_RPC_R-REPID
                   RPSEG = LS_RPC_SI-RPSEG
                   RITEM = LS_RPC_SI-RITEM BINARY SEARCH.
        IF SY-SUBRC IS INITIAL.
          LOOP AT LT_RPC_SICC INTO DATA(LS_RPC_SICC) FROM SY-TABIX.
            IF LS_RPC_SICC-RPSEG <> LS_RPC_SI-RPSEG
              OR LS_RPC_SICC-RITEM <> LS_RPC_SI-RITEM.
              EXIT.
            ENDIF.
            CLEAR: LS0_RPC_COND.
            MOVE-CORRESPONDING LS_RPC_SICC TO LS0_RPC_COND.
            APPEND LS0_RPC_COND TO LS0_RPC_SI-CONDITIONS.
          ENDLOOP.
        ENDIF.

*       Process row conditions
        READ TABLE LT_RPC_SIRC TRANSPORTING NO FIELDS
          WITH KEY REPID = GS_RPC_R-REPID
                   RPSEG = LS_RPC_SI-RPSEG
                   RITEM = LS_RPC_SI-RITEM BINARY SEARCH.
        IF SY-SUBRC IS INITIAL.
          LOOP AT LT_RPC_SIRC INTO DATA(LS_RPC_SIRC) FROM SY-TABIX.
            IF LS_RPC_SIRC-RPSEG <> LS_RPC_SI-RPSEG
              OR LS_RPC_SIRC-RITEM <> LS_RPC_SI-RITEM.
              EXIT.
            ENDIF.
            CLEAR: LS0_RPC_COND.
            MOVE-CORRESPONDING LS_RPC_SIRC TO LS0_RPC_COND.
            APPEND LS0_RPC_COND TO LS0_RPC_SI-CONDITIONS.
          ENDLOOP.
        ENDIF.

        APPEND LS0_RPC_SI TO LS0_RPC_S-ITEMS.
      ENDLOOP.
    ENDIF.

    APPEND LS0_RPC_S TO GS_RPC_R-SEGMENTS.
  ENDLOOP.

  LOOP AT LT_RPC_F INTO DATA(LS_RPC_F).
    CLEAR: LS0_RPC_F.
    MOVE-CORRESPONDING LS_RPC_F TO LS0_RPC_F.
    LS0_RPC_F-EFMON = I_ENMON.
    LS0_RPC_F-BEMON = I_BEMON.
    LS0_RPC_F-ENMON = I_ENMON.
    LS0_RPC_F-BUTXT = I_BUTXT.

    READ TABLE LT_RPC_D TRANSPORTING NO FIELDS
      WITH KEY REPID = GS_RPC_R-REPID
               RPSEG = LS_RPC_F-RPSEG
               RITEM = LS_RPC_F-RITEM BINARY SEARCH.
    IF SY-SUBRC IS INITIAL.
      LOOP AT LT_RPC_D INTO DATA(LS_RPC_D) FROM SY-TABIX.
        IF LS_RPC_D-RPSEG <> LS_RPC_F-RPSEG
        OR LS_RPC_D-RITEM <> LS_RPC_F-RITEM.
          EXIT.
        ENDIF.
        CLEAR: LS0_RPC_D.
        MOVE-CORRESPONDING LS_RPC_D TO LS0_RPC_D.
        APPEND LS0_RPC_D TO LS0_RPC_F-DATA.
      ENDLOOP.
    ENDIF.

    APPEND LS0_RPC_F TO GS_RPC_R-FORMSTR.
  ENDLOOP.

  E_RPC_R = GS_RPC_R.


*  SELECT T~RYEAR T~BSTAT T~RRCTY T~DRCRK T~POPER T~RACCT T~RHCUR T~HSL "sum( t~hsl ) as hsl
*    "sum( t~tsl ) as tsl"
*    T~BELNR AS BELNR    FROM ACDOCA AS T
*    INTO CORRESPONDING FIELDS OF TABLE GT_ACDOCA
**    for all entries in gt_skb1
*    WHERE T~RLDNR = P_RLDNR
*      AND T~RRCTY = '0'
*      AND T~RBUKRS = P_BUKRS
*      "and ( ( t~ryear = p_year and t~poper in s_peri ) or ( t~ryear = p_cyear and t~poper = s_cperi ) )
*      AND ( T~RYEAR = P_YEAR OR T~RYEAR = P_CYEAR )
*      AND ( T~BSTAT = '' OR T~BSTAT = 'L' OR T~BSTAT = 'U' OR T~BSTAT = 'J' OR T~BSTAT = 'C' )
*      AND T~RHCUR = GS_T001-WAERS
*      AND T~PRCTR IN S_PRCTR
*      AND T~SEGMENT IN S_SEGMT.
ENDFUNCTION.
